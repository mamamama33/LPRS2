
C:\Users\urosm\AppData\Local\arduino\sketches\E72BD33C5AE3E015C57F84E4C02A1A88/Predajna_strana_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__dtors_end>
       4:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_1>
       8:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__vector_2>
       c:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_3>
      10:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_3>
      14:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_3>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_18>
      4c:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_19>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <digital_pin_to_timer_PGM>:
      72:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
      82:	00 00 00 00 00 00 00                                .......

00000089 <port_to_input_PGM>:
      89:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000093 <port_to_output_PGM>:
      93:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009d <digital_pin_to_port_PGM>:
      9d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ad:	03 03 03 03 02 02 03                                .......

000000b4 <digital_pin_to_bit_mask_PGM>:
      b4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c4:	04 08 10 20 40 80 40 00                             ... @.@.

000000cc <__ctors_start>:
__ctors_start():
      cc:	37 06       	cpc	r3, r23

000000ce <__ctors_end>:
__dtors_start():
      ce:	2f 0d       	add	r18, r15

000000d0 <__dtors_end>:
__dtors_end():
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      dc:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      de:	a0 ef       	ldi	r26, 0xF0	; 240
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      e0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      e6:	a5 31       	cpi	r26, 0x15	; 21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      e8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      ec:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      ee:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      f0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      f2:	ea e8       	ldi	r30, 0x8A	; 138
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      f4:	ff e1       	ldi	r31, 0x1F	; 31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      f8:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      fa:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      fc:	a0 3f       	cpi	r26, 0xF0	; 240
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      fe:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     102:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     104:	c7 e6       	ldi	r28, 0x67	; 103
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     106:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     112:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     114:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 45 08 	call	0x108a	; 0x108a <main>
     11c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__do_global_dtors>

00000120 <__bad_interrupt>:
__vector_22():
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <digitalWrite>:
digitalWrite():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	fc 01       	movw	r30, r24
     128:	ee 58       	subi	r30, 0x8E	; 142
     12a:	ff 4f       	sbci	r31, 0xFF	; 255
     12c:	24 91       	lpm	r18, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     12e:	fc 01       	movw	r30, r24
     130:	ec 54       	subi	r30, 0x4C	; 76
     132:	ff 4f       	sbci	r31, 0xFF	; 255
     134:	34 91       	lpm	r19, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     136:	fc 01       	movw	r30, r24
     138:	e3 56       	subi	r30, 0x63	; 99
     13a:	ff 4f       	sbci	r31, 0xFF	; 255
     13c:	e4 91       	lpm	r30, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     13e:	ee 23       	and	r30, r30
     140:	c9 f0       	breq	.+50     	; 0x174 <digitalWrite+0x50>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     142:	22 23       	and	r18, r18
     144:	39 f0       	breq	.+14     	; 0x154 <digitalWrite+0x30>
turnOffPWM():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     146:	24 30       	cpi	r18, 0x04	; 4
     148:	01 f1       	breq	.+64     	; 0x18a <digitalWrite+0x66>
     14a:	a8 f4       	brcc	.+42     	; 0x176 <digitalWrite+0x52>
     14c:	22 30       	cpi	r18, 0x02	; 2
     14e:	69 f1       	breq	.+90     	; 0x1aa <digitalWrite+0x86>
     150:	23 30       	cpi	r18, 0x03	; 3
     152:	79 f1       	breq	.+94     	; 0x1b2 <digitalWrite+0x8e>
digitalWrite():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	ee 0f       	add	r30, r30
     158:	ff 1f       	adc	r31, r31
     15a:	ed 56       	subi	r30, 0x6D	; 109
     15c:	ff 4f       	sbci	r31, 0xFF	; 255
     15e:	a5 91       	lpm	r26, Z+
     160:	b4 91       	lpm	r27, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     162:	8f b7       	in	r24, 0x3f	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     164:	f8 94       	cli
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     166:	ec 91       	ld	r30, X
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     168:	61 11       	cpse	r22, r1
     16a:	26 c0       	rjmp	.+76     	; 0x1b8 <digitalWrite+0x94>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     16c:	30 95       	com	r19
     16e:	3e 23       	and	r19, r30
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     170:	3c 93       	st	X, r19
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     172:	8f bf       	out	0x3f, r24	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
     174:	08 95       	ret
turnOffPWM():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     176:	28 30       	cpi	r18, 0x08	; 8
     178:	71 f0       	breq	.+28     	; 0x196 <digitalWrite+0x72>
     17a:	29 30       	cpi	r18, 0x09	; 9
     17c:	91 f0       	breq	.+36     	; 0x1a2 <digitalWrite+0x7e>
     17e:	25 30       	cpi	r18, 0x05	; 5
     180:	49 f7       	brne	.-46     	; 0x154 <digitalWrite+0x30>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     182:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     186:	8f 7d       	andi	r24, 0xDF	; 223
     188:	03 c0       	rjmp	.+6      	; 0x190 <digitalWrite+0x6c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     18a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     18e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     190:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     194:	df cf       	rjmp	.-66     	; 0x154 <digitalWrite+0x30>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     196:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     19a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     19c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1a0:	d9 cf       	rjmp	.-78     	; 0x154 <digitalWrite+0x30>
     1a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1a6:	8f 7d       	andi	r24, 0xDF	; 223
     1a8:	f9 cf       	rjmp	.-14     	; 0x19c <digitalWrite+0x78>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     1aa:	84 b5       	in	r24, 0x24	; 36
     1ac:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     1ae:	84 bd       	out	0x24, r24	; 36
     1b0:	d1 cf       	rjmp	.-94     	; 0x154 <digitalWrite+0x30>
     1b2:	84 b5       	in	r24, 0x24	; 36
     1b4:	8f 7d       	andi	r24, 0xDF	; 223
     1b6:	fb cf       	rjmp	.-10     	; 0x1ae <digitalWrite+0x8a>
digitalWrite():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     1b8:	3e 2b       	or	r19, r30
     1ba:	da cf       	rjmp	.-76     	; 0x170 <digitalWrite+0x4c>

000001bc <pinMode>:
pinMode():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	fc 01       	movw	r30, r24
     1c4:	ec 54       	subi	r30, 0x4C	; 76
     1c6:	ff 4f       	sbci	r31, 0xFF	; 255
     1c8:	24 91       	lpm	r18, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     1ca:	83 56       	subi	r24, 0x63	; 99
     1cc:	9f 4f       	sbci	r25, 0xFF	; 255
     1ce:	fc 01       	movw	r30, r24
     1d0:	84 91       	lpm	r24, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     1d2:	88 23       	and	r24, r24
     1d4:	d1 f0       	breq	.+52     	; 0x20a <pinMode+0x4e>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	fc 01       	movw	r30, r24
     1de:	e8 59       	subi	r30, 0x98	; 152
     1e0:	ff 4f       	sbci	r31, 0xFF	; 255
     1e2:	a5 91       	lpm	r26, Z+
     1e4:	b4 91       	lpm	r27, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     1e6:	fc 01       	movw	r30, r24
     1e8:	ed 56       	subi	r30, 0x6D	; 109
     1ea:	ff 4f       	sbci	r31, 0xFF	; 255
     1ec:	c5 91       	lpm	r28, Z+
     1ee:	d4 91       	lpm	r29, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     1f0:	61 11       	cpse	r22, r1
     1f2:	0e c0       	rjmp	.+28     	; 0x210 <pinMode+0x54>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     1f4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     1f6:	f8 94       	cli
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     1f8:	8c 91       	ld	r24, X
     1fa:	e2 2f       	mov	r30, r18
     1fc:	e0 95       	com	r30
     1fe:	8e 23       	and	r24, r30
     200:	8c 93       	st	X, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     202:	28 81       	ld	r18, Y
     204:	e2 23       	and	r30, r18
     206:	e8 83       	st	Y, r30
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     208:	9f bf       	out	0x3f, r25	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     210:	8f b7       	in	r24, 0x3f	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     212:	f8 94       	cli
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     214:	ec 91       	ld	r30, X
     216:	e2 2b       	or	r30, r18
     218:	ec 93       	st	X, r30
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     21a:	8f bf       	out	0x3f, r24	; 63
     21c:	f6 cf       	rjmp	.-20     	; 0x20a <pinMode+0x4e>

0000021e <micros>:
micros():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     21e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     220:	f8 94       	cli
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     222:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <timer0_overflow_count>
     226:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <timer0_overflow_count+0x1>
     22a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <timer0_overflow_count+0x2>
     22e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <timer0_overflow_count+0x3>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     232:	26 b5       	in	r18, 0x26	; 38
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     234:	a8 9b       	sbis	0x15, 0	; 21
     236:	05 c0       	rjmp	.+10     	; 0x242 <micros+0x24>
     238:	2f 3f       	cpi	r18, 0xFF	; 255
     23a:	19 f0       	breq	.+6      	; 0x242 <micros+0x24>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	a1 1d       	adc	r26, r1
     240:	b1 1d       	adc	r27, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     242:	3f bf       	out	0x3f, r19	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     244:	ba 2f       	mov	r27, r26
     246:	a9 2f       	mov	r26, r25
     248:	98 2f       	mov	r25, r24
     24a:	88 27       	eor	r24, r24
     24c:	bc 01       	movw	r22, r24
     24e:	cd 01       	movw	r24, r26
     250:	62 0f       	add	r22, r18
     252:	71 1d       	adc	r23, r1
     254:	81 1d       	adc	r24, r1
     256:	91 1d       	adc	r25, r1
     258:	43 e0       	ldi	r20, 0x03	; 3
     25a:	66 0f       	add	r22, r22
     25c:	77 1f       	adc	r23, r23
     25e:	88 1f       	adc	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	4a 95       	dec	r20
     264:	d1 f7       	brne	.-12     	; 0x25a <micros+0x3c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     266:	08 95       	ret

00000268 <delay>:
delay():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     268:	8f 92       	push	r8
     26a:	9f 92       	push	r9
     26c:	af 92       	push	r10
     26e:	bf 92       	push	r11
     270:	cf 92       	push	r12
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	4b 01       	movw	r8, r22
     27a:	5c 01       	movw	r10, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     27c:	0e 94 0f 01 	call	0x21e	; 0x21e <micros>
     280:	6b 01       	movw	r12, r22
     282:	7c 01       	movw	r14, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     284:	0e 94 0f 01 	call	0x21e	; 0x21e <micros>
     288:	6c 19       	sub	r22, r12
     28a:	7d 09       	sbc	r23, r13
     28c:	8e 09       	sbc	r24, r14
     28e:	9f 09       	sbc	r25, r15
     290:	68 3e       	cpi	r22, 0xE8	; 232
     292:	73 40       	sbci	r23, 0x03	; 3
     294:	81 05       	cpc	r24, r1
     296:	91 05       	cpc	r25, r1
     298:	a8 f3       	brcs	.-22     	; 0x284 <delay+0x1c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	82 1a       	sub	r8, r18
     29e:	91 08       	sbc	r9, r1
     2a0:	a1 08       	sbc	r10, r1
     2a2:	b1 08       	sbc	r11, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     2a4:	88 ee       	ldi	r24, 0xE8	; 232
     2a6:	c8 0e       	add	r12, r24
     2a8:	83 e0       	ldi	r24, 0x03	; 3
     2aa:	d8 1e       	adc	r13, r24
     2ac:	e1 1c       	adc	r14, r1
     2ae:	f1 1c       	adc	r15, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     2b0:	81 14       	cp	r8, r1
     2b2:	91 04       	cpc	r9, r1
     2b4:	a1 04       	cpc	r10, r1
     2b6:	b1 04       	cpc	r11, r1
     2b8:	29 f7       	brne	.-54     	; 0x284 <delay+0x1c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	bf 90       	pop	r11
     2c4:	af 90       	pop	r10
     2c6:	9f 90       	pop	r9
     2c8:	8f 90       	pop	r8
     2ca:	08 95       	ret

000002cc <String::StringIfHelper() const>:
StringIfHelper():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:51
{
  // use a function pointer to allow for "if (s)" without the
  // complications of an operator bool(). for more information, see:
  // http://www.artima.com/cppsource/safebool.html
  typedef void (String::*StringIfHelperType)() const;
  void StringIfHelper() const {}
     2cc:	08 95       	ret

000002ce <nothing>:
nothing():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     2ce:	08 95       	ret

000002d0 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     2d0:	af 92       	push	r10
     2d2:	bf 92       	push	r11
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	6c 01       	movw	r12, r24
     2e6:	7b 01       	movw	r14, r22
     2e8:	8b 01       	movw	r16, r22
     2ea:	04 0f       	add	r16, r20
     2ec:	15 1f       	adc	r17, r21
     2ee:	eb 01       	movw	r28, r22
     2f0:	5e 01       	movw	r10, r28
     2f2:	ae 18       	sub	r10, r14
     2f4:	bf 08       	sbc	r11, r15
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     2f6:	c0 17       	cp	r28, r16
     2f8:	d1 07       	cpc	r29, r17
     2fa:	59 f0       	breq	.+22     	; 0x312 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     2fc:	69 91       	ld	r22, Y+
     2fe:	d6 01       	movw	r26, r12
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	01 90       	ld	r0, Z+
     306:	f0 81       	ld	r31, Z
     308:	e0 2d       	mov	r30, r0
     30a:	c6 01       	movw	r24, r12
     30c:	09 95       	icall
     30e:	89 2b       	or	r24, r25
     310:	79 f7       	brne	.-34     	; 0x2f0 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     312:	c5 01       	movw	r24, r10
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	df 90       	pop	r13
     322:	cf 90       	pop	r12
     324:	bf 90       	pop	r11
     326:	af 90       	pop	r10
     328:	08 95       	ret

0000032a <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     32a:	fc 01       	movw	r30, r24
     32c:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     32e:	44 8d       	ldd	r20, Z+28	; 0x1c
     330:	25 2f       	mov	r18, r21
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	84 2f       	mov	r24, r20
     336:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     338:	82 1b       	sub	r24, r18
     33a:	93 0b       	sbc	r25, r19
     33c:	54 17       	cp	r21, r20
     33e:	10 f0       	brcs	.+4      	; 0x344 <HardwareSerial::availableForWrite()+0x1a>
     340:	cf 96       	adiw	r24, 0x3f	; 63
     342:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     344:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     346:	08 95       	ret

00000348 <HardwareSerial::read()>:
read():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     348:	fc 01       	movw	r30, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     34a:	91 8d       	ldd	r25, Z+25	; 0x19
     34c:	82 8d       	ldd	r24, Z+26	; 0x1a
     34e:	98 17       	cp	r25, r24
     350:	61 f0       	breq	.+24     	; 0x36a <HardwareSerial::read()+0x22>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     352:	a2 8d       	ldd	r26, Z+26	; 0x1a
     354:	ae 0f       	add	r26, r30
     356:	bf 2f       	mov	r27, r31
     358:	b1 1d       	adc	r27, r1
     35a:	5d 96       	adiw	r26, 0x1d	; 29
     35c:	8c 91       	ld	r24, X
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     35e:	92 8d       	ldd	r25, Z+26	; 0x1a
     360:	9f 5f       	subi	r25, 0xFF	; 255
     362:	9f 73       	andi	r25, 0x3F	; 63
     364:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     36e:	08 95       	ret

00000370 <HardwareSerial::peek()>:
peek():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     370:	fc 01       	movw	r30, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     372:	91 8d       	ldd	r25, Z+25	; 0x19
     374:	82 8d       	ldd	r24, Z+26	; 0x1a
     376:	98 17       	cp	r25, r24
     378:	31 f0       	breq	.+12     	; 0x386 <HardwareSerial::peek()+0x16>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     37a:	82 8d       	ldd	r24, Z+26	; 0x1a
     37c:	e8 0f       	add	r30, r24
     37e:	f1 1d       	adc	r31, r1
     380:	85 8d       	ldd	r24, Z+29	; 0x1d
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     38a:	08 95       	ret

0000038c <HardwareSerial::available()>:
available():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     38c:	fc 01       	movw	r30, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     38e:	91 8d       	ldd	r25, Z+25	; 0x19
     390:	22 8d       	ldd	r18, Z+26	; 0x1a
     392:	89 2f       	mov	r24, r25
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	80 5c       	subi	r24, 0xC0	; 192
     398:	9f 4f       	sbci	r25, 0xFF	; 255
     39a:	82 1b       	sub	r24, r18
     39c:	91 09       	sbc	r25, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     39e:	8f 73       	andi	r24, 0x3F	; 63
     3a0:	99 27       	eor	r25, r25
     3a2:	08 95       	ret

000003a4 <Serial0_available()>:
Serial0_available():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     3a4:	8f e3       	ldi	r24, 0x3F	; 63
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	0e 94 c6 01 	call	0x38c	; 0x38c <HardwareSerial::available()>
     3ac:	21 e0       	ldi	r18, 0x01	; 1
     3ae:	89 2b       	or	r24, r25
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <Serial0_available()+0x10>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     3b4:	82 2f       	mov	r24, r18
     3b6:	08 95       	ret

000003b8 <serialEventRun()>:
serialEventRun():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	89 2b       	or	r24, r25
     3be:	29 f0       	breq	.+10     	; 0x3ca <serialEventRun()+0x12>
     3c0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Serial0_available()>
     3c4:	81 11       	cpse	r24, r1
     3c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     3ca:	08 95       	ret

000003cc <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     3cc:	fc 01       	movw	r30, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     3ce:	a4 8d       	ldd	r26, Z+28	; 0x1c
     3d0:	a8 0f       	add	r26, r24
     3d2:	b9 2f       	mov	r27, r25
     3d4:	b1 1d       	adc	r27, r1
     3d6:	a3 5a       	subi	r26, 0xA3	; 163
     3d8:	bf 4f       	sbci	r27, 0xFF	; 255
     3da:	2c 91       	ld	r18, X
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     3dc:	84 8d       	ldd	r24, Z+28	; 0x1c
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	8f 73       	andi	r24, 0x3F	; 63
     3e4:	99 27       	eor	r25, r25
     3e6:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     3e8:	a6 89       	ldd	r26, Z+22	; 0x16
     3ea:	b7 89       	ldd	r27, Z+23	; 0x17
     3ec:	2c 93       	st	X, r18
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3ee:	a0 89       	ldd	r26, Z+16	; 0x10
     3f0:	b1 89       	ldd	r27, Z+17	; 0x11
     3f2:	8c 91       	ld	r24, X
     3f4:	83 70       	andi	r24, 0x03	; 3
     3f6:	80 64       	ori	r24, 0x40	; 64
     3f8:	8c 93       	st	X, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     3fa:	93 8d       	ldd	r25, Z+27	; 0x1b
     3fc:	84 8d       	ldd	r24, Z+28	; 0x1c
     3fe:	98 13       	cpse	r25, r24
     400:	06 c0       	rjmp	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     402:	02 88       	ldd	r0, Z+18	; 0x12
     404:	f3 89       	ldd	r31, Z+19	; 0x13
     406:	e0 2d       	mov	r30, r0
     408:	80 81       	ld	r24, Z
     40a:	8f 7d       	andi	r24, 0xDF	; 223
     40c:	80 83       	st	Z, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     40e:	08 95       	ret

00000410 <HardwareSerial::write(unsigned char)>:
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ec 01       	movw	r28, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     422:	9b 8d       	ldd	r25, Y+27	; 0x1b
     424:	8c 8d       	ldd	r24, Y+28	; 0x1c
     426:	98 13       	cpse	r25, r24
     428:	1a c0       	rjmp	.+52     	; 0x45e <HardwareSerial::write(unsigned char)+0x4e>
     42a:	e8 89       	ldd	r30, Y+16	; 0x10
     42c:	f9 89       	ldd	r31, Y+17	; 0x11
     42e:	80 81       	ld	r24, Z
     430:	85 ff       	sbrs	r24, 5
     432:	15 c0       	rjmp	.+42     	; 0x45e <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     434:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     436:	f8 94       	cli
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     438:	ee 89       	ldd	r30, Y+22	; 0x16
     43a:	ff 89       	ldd	r31, Y+23	; 0x17
     43c:	60 83       	st	Z, r22
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     43e:	e8 89       	ldd	r30, Y+16	; 0x10
     440:	f9 89       	ldd	r31, Y+17	; 0x11
     442:	80 81       	ld	r24, Z
     444:	83 70       	andi	r24, 0x03	; 3
     446:	80 64       	ori	r24, 0x40	; 64
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     448:	80 83       	st	Z, r24
__iRestore():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     44a:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	08 95       	ret
     45e:	f6 2e       	mov	r15, r22
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     460:	0b 8d       	ldd	r16, Y+27	; 0x1b
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	0f 5f       	subi	r16, 0xFF	; 255
     466:	1f 4f       	sbci	r17, 0xFF	; 255
     468:	0f 73       	andi	r16, 0x3F	; 63
     46a:	11 27       	eor	r17, r17
     46c:	e0 2e       	mov	r14, r16
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     46e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     470:	8e 11       	cpse	r24, r14
     472:	0c c0       	rjmp	.+24     	; 0x48c <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	07 fc       	sbrc	r0, 7
     478:	fa cf       	rjmp	.-12     	; 0x46e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     47a:	e8 89       	ldd	r30, Y+16	; 0x10
     47c:	f9 89       	ldd	r31, Y+17	; 0x11
     47e:	80 81       	ld	r24, Z
     480:	85 ff       	sbrs	r24, 5
     482:	f5 cf       	rjmp	.-22     	; 0x46e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     484:	ce 01       	movw	r24, r28
     486:	0e 94 e6 01 	call	0x3cc	; 0x3cc <HardwareSerial::_tx_udr_empty_irq()>
     48a:	f1 cf       	rjmp	.-30     	; 0x46e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     48c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     48e:	ec 0f       	add	r30, r28
     490:	fd 2f       	mov	r31, r29
     492:	f1 1d       	adc	r31, r1
     494:	e3 5a       	subi	r30, 0xA3	; 163
     496:	ff 4f       	sbci	r31, 0xFF	; 255
     498:	f0 82       	st	Z, r15
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     49a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     49c:	f8 94       	cli
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     49e:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     4a0:	ea 89       	ldd	r30, Y+18	; 0x12
     4a2:	fb 89       	ldd	r31, Y+19	; 0x13
     4a4:	80 81       	ld	r24, Z
     4a6:	80 62       	ori	r24, 0x20	; 32
     4a8:	cf cf       	rjmp	.-98     	; 0x448 <HardwareSerial::write(unsigned char)+0x38>

000004aa <HardwareSerial::flush()>:
flush():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     4b0:	88 8d       	ldd	r24, Y+24	; 0x18
     4b2:	88 23       	and	r24, r24
     4b4:	b9 f0       	breq	.+46     	; 0x4e4 <HardwareSerial::flush()+0x3a>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     4b6:	aa 89       	ldd	r26, Y+18	; 0x12
     4b8:	bb 89       	ldd	r27, Y+19	; 0x13
     4ba:	e8 89       	ldd	r30, Y+16	; 0x10
     4bc:	f9 89       	ldd	r31, Y+17	; 0x11
     4be:	8c 91       	ld	r24, X
     4c0:	85 fd       	sbrc	r24, 5
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <HardwareSerial::flush()+0x20>
     4c4:	80 81       	ld	r24, Z
     4c6:	86 fd       	sbrc	r24, 6
     4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <HardwareSerial::flush()+0x3a>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	07 fc       	sbrc	r0, 7
     4ce:	f7 cf       	rjmp	.-18     	; 0x4be <HardwareSerial::flush()+0x14>
     4d0:	8c 91       	ld	r24, X
     4d2:	85 ff       	sbrs	r24, 5
     4d4:	f2 cf       	rjmp	.-28     	; 0x4ba <HardwareSerial::flush()+0x10>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     4d6:	80 81       	ld	r24, Z
     4d8:	85 ff       	sbrs	r24, 5
     4da:	ed cf       	rjmp	.-38     	; 0x4b6 <HardwareSerial::flush()+0xc>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     4dc:	ce 01       	movw	r24, r28
     4de:	0e 94 e6 01 	call	0x3cc	; 0x3cc <HardwareSerial::_tx_udr_empty_irq()>
     4e2:	e9 cf       	rjmp	.-46     	; 0x4b6 <HardwareSerial::flush()+0xc>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <SoftwareSerial::peek()>:
peek():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     4ea:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <SoftwareSerial::active_object>
     4ee:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <SoftwareSerial::active_object+0x1>
     4f2:	28 17       	cp	r18, r24
     4f4:	39 07       	cpc	r19, r25
     4f6:	71 f4       	brne	.+28     	; 0x514 <SoftwareSerial::peek()+0x2a>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     4f8:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <SoftwareSerial::_receive_buffer_head>
     4fc:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <SoftwareSerial::_receive_buffer_tail>
     500:	98 17       	cp	r25, r24
     502:	41 f0       	breq	.+16     	; 0x514 <SoftwareSerial::peek()+0x2a>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     504:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <SoftwareSerial::_receive_buffer_head>
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	e0 51       	subi	r30, 0x10	; 16
     50c:	fe 4f       	sbci	r31, 0xFE	; 254
     50e:	80 81       	ld	r24, Z
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     518:	08 95       	ret

0000051a <SoftwareSerial::flush()>:
flush():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:359
  return b;
}

void LoRaClass::flush()
{
}
     51a:	08 95       	ret

0000051c <SoftwareSerial::write(unsigned char)>:
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return ((uint16_t)(_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head)) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	dc 01       	movw	r26, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     52a:	5c 96       	adiw	r26, 0x1c	; 28
     52c:	ed 90       	ld	r14, X+
     52e:	fc 90       	ld	r15, X
     530:	5d 97       	sbiw	r26, 0x1d	; 29
     532:	e1 14       	cp	r14, r1
     534:	f1 04       	cpc	r15, r1
     536:	79 f4       	brne	.+30     	; 0x556 <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	13 96       	adiw	r26, 0x03	; 3
     53e:	9c 93       	st	X, r25
     540:	8e 93       	st	-X, r24
     542:	12 97       	sbiw	r26, 0x02	; 2
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);

  return 1;
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     556:	51 96       	adiw	r26, 0x11	; 17
     558:	ed 91       	ld	r30, X+
     55a:	fc 91       	ld	r31, X
     55c:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     55e:	50 96       	adiw	r26, 0x10	; 16
     560:	8c 91       	ld	r24, X
     562:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     564:	98 2f       	mov	r25, r24
     566:	90 95       	com	r25
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     568:	0f b7       	in	r16, 0x3f	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     56a:	5e 96       	adiw	r26, 0x1e	; 30
     56c:	2c 91       	ld	r18, X
     56e:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     570:	12 2f       	mov	r17, r18
     572:	12 70       	andi	r17, 0x02	; 2
     574:	21 fd       	sbrc	r18, 1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     576:	60 95       	com	r22
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     578:	f8 94       	cli
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     57a:	20 81       	ld	r18, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     57c:	11 23       	and	r17, r17
     57e:	19 f1       	breq	.+70     	; 0x5c6 <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     580:	28 2b       	or	r18, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     582:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     584:	e7 01       	movw	r28, r14
     586:	21 97       	sbiw	r28, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <SoftwareSerial::write(unsigned char)+0x6a>
     58a:	28 e0       	ldi	r18, 0x08	; 8
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     58c:	46 2f       	mov	r20, r22
     58e:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     590:	30 81       	ld	r19, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     592:	60 ff       	sbrs	r22, 0
     594:	1a c0       	rjmp	.+52     	; 0x5ca <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     596:	38 2b       	or	r19, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     598:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     59a:	e7 01       	movw	r28, r14
     59c:	21 97       	sbiw	r28, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <SoftwareSerial::write(unsigned char)+0x80>
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     5a0:	ba 01       	movw	r22, r20
     5a2:	75 95       	asr	r23
     5a4:	67 95       	ror	r22
     5a6:	21 50       	subi	r18, 0x01	; 1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     5a8:	89 f7       	brne	.-30     	; 0x58c <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     5aa:	11 23       	and	r17, r17
     5ac:	81 f0       	breq	.+32     	; 0x5ce <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     5ae:	80 81       	ld	r24, Z
     5b0:	89 23       	and	r24, r25
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     5b2:	80 83       	st	Z, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     5b4:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     5b6:	5c 96       	adiw	r26, 0x1c	; 28
     5b8:	8d 91       	ld	r24, X+
     5ba:	9c 91       	ld	r25, X
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <SoftwareSerial::write(unsigned char)+0xa0>
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);

  return 1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	c1 cf       	rjmp	.-126    	; 0x548 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     5c6:	29 23       	and	r18, r25
     5c8:	dc cf       	rjmp	.-72     	; 0x582 <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     5ca:	39 23       	and	r19, r25
     5cc:	e5 cf       	rjmp	.-54     	; 0x598 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     5ce:	90 81       	ld	r25, Z
     5d0:	89 2b       	or	r24, r25
     5d2:	ef cf       	rjmp	.-34     	; 0x5b2 <SoftwareSerial::write(unsigned char)+0x96>

000005d4 <SoftwareSerial::available()>:
available():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     5d4:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <SoftwareSerial::active_object>
     5d8:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <SoftwareSerial::active_object+0x1>
     5dc:	28 17       	cp	r18, r24
     5de:	39 07       	cpc	r19, r25
     5e0:	61 f4       	brne	.+24     	; 0x5fa <SoftwareSerial::available()+0x26>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return ((uint16_t)(_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head)) % _SS_MAX_RX_BUFF;
     5e2:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <SoftwareSerial::_receive_buffer_tail>
     5e6:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <SoftwareSerial::_receive_buffer_head>
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	80 5c       	subi	r24, 0xC0	; 192
     5ee:	9f 4f       	sbci	r25, 0xFF	; 255
     5f0:	82 1b       	sub	r24, r18
     5f2:	91 09       	sbc	r25, r1
     5f4:	8f 73       	andi	r24, 0x3F	; 63
     5f6:	99 27       	eor	r25, r25
     5f8:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return ((uint16_t)(_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head)) % _SS_MAX_RX_BUFF;
}
     5fe:	08 95       	ret

00000600 <SoftwareSerial::read()>:
read():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     600:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <SoftwareSerial::active_object>
     604:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <SoftwareSerial::active_object+0x1>
     608:	28 17       	cp	r18, r24
     60a:	39 07       	cpc	r19, r25
     60c:	b9 f4       	brne	.+46     	; 0x63c <SoftwareSerial::read()+0x3c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     60e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <SoftwareSerial::_receive_buffer_head>
     612:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <SoftwareSerial::_receive_buffer_tail>
     616:	98 17       	cp	r25, r24
     618:	89 f0       	breq	.+34     	; 0x63c <SoftwareSerial::read()+0x3c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     61a:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <SoftwareSerial::_receive_buffer_head>
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	e0 51       	subi	r30, 0x10	; 16
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	80 81       	ld	r24, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     626:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <SoftwareSerial::_receive_buffer_head>
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	2f 5f       	subi	r18, 0xFF	; 255
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	2f 73       	andi	r18, 0x3F	; 63
     632:	33 27       	eor	r19, r19
     634:	20 93 30 02 	sts	0x0230, r18	; 0x800230 <SoftwareSerial::_receive_buffer_head>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     640:	08 95       	ret

00000642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>:
singleTransfer():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:734
{
  singleTransfer(address | 0x80, value);
}

uint8_t LoRaClass::singleTransfer(uint8_t address, uint8_t value)
{
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
     64c:	06 2f       	mov	r16, r22
     64e:	14 2f       	mov	r17, r20
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:737
  uint8_t response;

  digitalWrite(_ss, LOW);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	88 89       	ldd	r24, Y+16	; 0x10
     654:	0e 94 92 00 	call	0x124	; 0x124 <digitalWrite>
     658:	9c 85       	ldd	r25, Y+12	; 0x0c
     65a:	8d 85       	ldd	r24, Y+13	; 0x0d
beginTransaction():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     65c:	9c bd       	out	0x2c, r25	; 44
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:207
    SPSR = settings.spsr;
     65e:	8d bd       	out	0x2d, r24	; 45
transfer():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:212
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     660:	0e bd       	out	0x2e, r16	; 46
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     662:	00 00       	nop
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     664:	0d b4       	in	r0, 0x2d	; 45
     666:	07 fe       	sbrs	r0, 7
     668:	fd cf       	rjmp	.-6      	; 0x664 <LoRaClass::singleTransfer(unsigned char, unsigned char)+0x22>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:221
    return SPDR;
     66a:	8e b5       	in	r24, 0x2e	; 46
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     66c:	1e bd       	out	0x2e, r17	; 46
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     66e:	00 00       	nop
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     670:	0d b4       	in	r0, 0x2d	; 45
     672:	07 fe       	sbrs	r0, 7
     674:	fd cf       	rjmp	.-6      	; 0x670 <LoRaClass::singleTransfer(unsigned char, unsigned char)+0x2e>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.h:221
    return SPDR;
     676:	1e b5       	in	r17, 0x2e	; 46
singleTransfer():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:744
  _spi->beginTransaction(_spiSettings);
  _spi->transfer(address);
  response = _spi->transfer(value);
  _spi->endTransaction();

  digitalWrite(_ss, HIGH);
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	88 89       	ldd	r24, Y+16	; 0x10
     67c:	0e 94 92 00 	call	0x124	; 0x124 <digitalWrite>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:747

  return response;
}
     680:	81 2f       	mov	r24, r17
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <LoRaClass::readRegister(unsigned char)>:
readRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:725
  }
}

uint8_t LoRaClass::readRegister(uint8_t address)
{
  return singleTransfer(address & 0x7f, 0x00);
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	0c 94 21 03 	jmp	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>

00000692 <LoRaClass::peek()>:
peek():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:340

  return readRegister(REG_FIFO);
}

int LoRaClass::peek()
{
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:341
  if (!available()) {
     69c:	e8 81       	ld	r30, Y
     69e:	f9 81       	ldd	r31, Y+1	; 0x01
     6a0:	00 84       	ldd	r0, Z+8	; 0x08
     6a2:	f1 85       	ldd	r31, Z+9	; 0x09
     6a4:	e0 2d       	mov	r30, r0
     6a6:	09 95       	icall
     6a8:	89 2b       	or	r24, r25
     6aa:	b1 f0       	breq	.+44     	; 0x6d8 <LoRaClass::peek()+0x46>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:346
    return -1;
  }

  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
     6ac:	6d e0       	ldi	r22, 0x0D	; 13
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
     6b4:	08 2f       	mov	r16, r24
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:349

  // read
  uint8_t b = readRegister(REG_FIFO);
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
     6be:	18 2f       	mov	r17, r24
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
     6c0:	40 2f       	mov	r20, r16
     6c2:	6d e8       	ldi	r22, 0x8D	; 141
     6c4:	ce 01       	movw	r24, r28
     6c6:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
peek():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:354
  uint8_t b = readRegister(REG_FIFO);

  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);

  return b;
     6ca:	81 2f       	mov	r24, r17
     6cc:	90 e0       	ldi	r25, 0x00	; 0
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:355
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:342
}

int LoRaClass::peek()
{
  if (!available()) {
    return -1;
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	9f ef       	ldi	r25, 0xFF	; 255
     6dc:	f8 cf       	rjmp	.-16     	; 0x6ce <LoRaClass::peek()+0x3c>

000006de <LoRaClass::read()>:
read():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:329
{
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
}

int LoRaClass::read()
{
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:330
  if (!available()) {
     6e4:	e8 81       	ld	r30, Y
     6e6:	f9 81       	ldd	r31, Y+1	; 0x01
     6e8:	00 84       	ldd	r0, Z+8	; 0x08
     6ea:	f1 85       	ldd	r31, Z+9	; 0x09
     6ec:	e0 2d       	mov	r30, r0
     6ee:	09 95       	icall
     6f0:	89 2b       	or	r24, r25
     6f2:	69 f0       	breq	.+26     	; 0x70e <LoRaClass::read()+0x30>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:334
    return -1;
  }

  _packetIndex++;
     6f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6f6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	9b 8f       	std	Y+27, r25	; 0x1b
     6fc:	8a 8f       	std	Y+26, r24	; 0x1a
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:336

  return readRegister(REG_FIFO);
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	ce 01       	movw	r24, r28
     702:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
     706:	90 e0       	ldi	r25, 0x00	; 0
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:337
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:331
}

int LoRaClass::read()
{
  if (!available()) {
    return -1;
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	9f ef       	ldi	r25, 0xFF	; 255
     712:	fa cf       	rjmp	.-12     	; 0x708 <LoRaClass::read()+0x2a>

00000714 <LoRaClass::available()>:
available():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:324

  return size;
}

int LoRaClass::available()
{
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	ec 01       	movw	r28, r24
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:325
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
     71a:	63 e1       	ldi	r22, 0x13	; 19
     71c:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	2a 8d       	ldd	r18, Y+26	; 0x1a
     724:	3b 8d       	ldd	r19, Y+27	; 0x1b
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:326
}
     726:	82 1b       	sub	r24, r18
     728:	93 0b       	sbc	r25, r19
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <LoRaClass::write(unsigned char const*, unsigned int)>:
write():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:304
{
  return write(&byte, sizeof(byte));
}

size_t LoRaClass::write(const uint8_t *buffer, size_t size)
{
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	6c 01       	movw	r12, r24
     744:	5b 01       	movw	r10, r22
     746:	ea 01       	movw	r28, r20
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:305
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
     748:	62 e2       	ldi	r22, 0x22	; 34
     74a:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
     74e:	f8 2e       	mov	r15, r24
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:308

  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	9c 01       	movw	r18, r24
     754:	2c 0f       	add	r18, r28
     756:	3d 1f       	adc	r19, r29
     758:	2f 3f       	cpi	r18, 0xFF	; 255
     75a:	31 05       	cpc	r19, r1
     75c:	29 f0       	breq	.+10     	; 0x768 <LoRaClass::write(unsigned char const*, unsigned int)+0x38>
     75e:	20 f0       	brcs	.+8      	; 0x768 <LoRaClass::write(unsigned char const*, unsigned int)+0x38>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:309
    size = MAX_PKT_LENGTH - currentLength;
     760:	cf ef       	ldi	r28, 0xFF	; 255
     762:	d0 e0       	ldi	r29, 0x00	; 0
     764:	c8 1b       	sub	r28, r24
     766:	d9 0b       	sbc	r29, r25
     768:	85 01       	movw	r16, r10
     76a:	ac 0e       	add	r10, r28
     76c:	bd 1e       	adc	r11, r29
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:313
  }

  // write data
  for (size_t i = 0; i < size; i++) {
     76e:	0a 15       	cp	r16, r10
     770:	1b 05       	cpc	r17, r11
     772:	41 f0       	breq	.+16     	; 0x784 <LoRaClass::write(unsigned char const*, unsigned int)+0x54>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:314
    writeRegister(REG_FIFO, buffer[i]);
     774:	f8 01       	movw	r30, r16
     776:	41 91       	ld	r20, Z+
     778:	8f 01       	movw	r16, r30
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
     77a:	60 e8       	ldi	r22, 0x80	; 128
     77c:	c6 01       	movw	r24, r12
     77e:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
     782:	f5 cf       	rjmp	.-22     	; 0x76e <LoRaClass::write(unsigned char const*, unsigned int)+0x3e>
write():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:318
  for (size_t i = 0; i < size; i++) {
    writeRegister(REG_FIFO, buffer[i]);
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
     784:	4c 2f       	mov	r20, r28
     786:	4f 0d       	add	r20, r15
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
     788:	62 ea       	ldi	r22, 0xA2	; 162
     78a:	c6 01       	movw	r24, r12
     78c:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
write():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:321

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);

  return size;
}
     790:	ce 01       	movw	r24, r28
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	df 90       	pop	r13
     79e:	cf 90       	pop	r12
     7a0:	bf 90       	pop	r11
     7a2:	af 90       	pop	r10
     7a4:	08 95       	ret

000007a6 <LoRaClass::write(unsigned char)>:
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:299
{
  return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
}

size_t LoRaClass::write(uint8_t byte)
{
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	1f 92       	push	r1
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	69 83       	std	Y+1, r22	; 0x01
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:300
  return write(&byte, sizeof(byte));
     7b2:	dc 01       	movw	r26, r24
     7b4:	ed 91       	ld	r30, X+
     7b6:	fc 91       	ld	r31, X
     7b8:	02 80       	ldd	r0, Z+2	; 0x02
     7ba:	f3 81       	ldd	r31, Z+3	; 0x03
     7bc:	e0 2d       	mov	r30, r0
     7be:	41 e0       	ldi	r20, 0x01	; 1
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	09 95       	icall
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:301
}
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <Print::availableForWrite()>:
availableForWrite():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret

000007d8 <String::startsWith(String const&, unsigned int) const [clone .constprop.49]>:
startsWith():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:496
{
  if (len < s2.len) return 0;
  return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
     7d8:	fc 01       	movw	r30, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:498
{
  if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     7da:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <buffer>
     7de:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <buffer+0x1>
     7e2:	00 97       	sbiw	r24, 0x00	; 0
     7e4:	61 f0       	breq	.+24     	; 0x7fe <String::startsWith(String const&, unsigned int) const [clone .constprop.49]+0x26>
     7e6:	60 81       	ld	r22, Z
     7e8:	71 81       	ldd	r23, Z+1	; 0x01
     7ea:	61 15       	cp	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	39 f0       	breq	.+14     	; 0x7fe <String::startsWith(String const&, unsigned int) const [clone .constprop.49]+0x26>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:499
  return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     7f0:	44 81       	ldd	r20, Z+4	; 0x04
     7f2:	55 81       	ldd	r21, Z+5	; 0x05
     7f4:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <strncmp>
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	89 2b       	or	r24, r25
     7fc:	09 f0       	breq	.+2      	; 0x800 <String::startsWith(String const&, unsigned int) const [clone .constprop.49]+0x28>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:498
  return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
  if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     7fe:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:500
  return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
     800:	82 2f       	mov	r24, r18
     802:	08 95       	ret

00000804 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     804:	fb 01       	movw	r30, r22
     806:	01 90       	ld	r0, Z+
     808:	00 20       	and	r0, r0
     80a:	e9 f7       	brne	.-6      	; 0x806 <Print::write(char const*) [clone .part.2]+0x2>
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	af 01       	movw	r20, r30
     810:	46 1b       	sub	r20, r22
     812:	57 0b       	sbc	r21, r23
     814:	dc 01       	movw	r26, r24
     816:	ed 91       	ld	r30, X+
     818:	fc 91       	ld	r31, X
     81a:	02 80       	ldd	r0, Z+2	; 0x02
     81c:	f3 81       	ldd	r31, Z+3	; 0x03
     81e:	e0 2d       	mov	r30, r0
     820:	09 94       	ijmp

00000822 <Print::println(char const*)>:
println():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:139
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ec 01       	movw	r28, r24
write():
     82c:	0e 94 02 04 	call	0x804	; 0x804 <Print::write(char const*) [clone .part.2]>
     830:	8c 01       	movw	r16, r24
     832:	60 e4       	ldi	r22, 0x40	; 64
     834:	71 e0       	ldi	r23, 0x01	; 1
     836:	ce 01       	movw	r24, r28
     838:	0e 94 02 04 	call	0x804	; 0x804 <Print::write(char const*) [clone .part.2]>
println():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:143
  size_t n = print(c);
  n += println();
  return n;
}
     83c:	80 0f       	add	r24, r16
     83e:	91 1f       	adc	r25, r17
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <String::invalidate()>:
invalidate():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:140
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	ec 01       	movw	r28, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:141
  if (buffer) free(buffer);
     850:	88 81       	ld	r24, Y
     852:	99 81       	ldd	r25, Y+1	; 0x01
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	11 f0       	breq	.+4      	; 0x85c <String::invalidate()+0x12>
     858:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <free>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     85c:	19 82       	std	Y+1, r1	; 0x01
     85e:	18 82       	st	Y, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     860:	1d 82       	std	Y+5, r1	; 0x05
     862:	1c 82       	std	Y+4, r1	; 0x04
     864:	1b 82       	std	Y+3, r1	; 0x03
     866:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:144
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <String::~String()>:
__base_dtor ():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
     86e:	fc 01       	movw	r30, r24
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	11 f0       	breq	.+4      	; 0x87c <String::~String()+0xe>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:125
    free(buffer);
     878:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <free>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:126
}
     87c:	08 95       	ret

0000087e <String::reserve(unsigned int)>:
reserve():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
     888:	88 81       	ld	r24, Y
     88a:	99 81       	ldd	r25, Y+1	; 0x01
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	59 f0       	breq	.+22     	; 0x8a6 <String::reserve(unsigned int)+0x28>
     890:	2a 81       	ldd	r18, Y+2	; 0x02
     892:	3b 81       	ldd	r19, Y+3	; 0x03
     894:	26 17       	cp	r18, r22
     896:	37 07       	cpc	r19, r23
     898:	30 f0       	brcs	.+12     	; 0x8a6 <String::reserve(unsigned int)+0x28>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     89a:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret
     8a6:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <realloc>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	59 f0       	breq	.+22     	; 0x8ca <String::reserve(unsigned int)+0x4c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
     8b4:	99 83       	std	Y+1, r25	; 0x01
     8b6:	88 83       	st	Y, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
     8b8:	1b 83       	std	Y+3, r17	; 0x03
     8ba:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     8bc:	2c 81       	ldd	r18, Y+4	; 0x04
     8be:	3d 81       	ldd	r19, Y+5	; 0x05
     8c0:	23 2b       	or	r18, r19
     8c2:	59 f7       	brne	.-42     	; 0x89a <String::reserve(unsigned int)+0x1c>
     8c4:	fc 01       	movw	r30, r24
     8c6:	10 82       	st	Z, r1
     8c8:	e8 cf       	rjmp	.-48     	; 0x89a <String::reserve(unsigned int)+0x1c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	e7 cf       	rjmp	.-50     	; 0x89c <String::reserve(unsigned int)+0x1e>

000008ce <String::concat(char const*, unsigned int)>:
concat():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:265
{
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:267
  unsigned int newlen = len + length;
  if (!cstr) return 0;
     8da:	61 15       	cp	r22, r1
     8dc:	71 05       	cpc	r23, r1
     8de:	41 f4       	brne	.+16     	; 0x8f0 <String::concat(char const*, unsigned int)+0x22>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:273
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
  strcpy(buffer + len, cstr);
  len = newlen;
  return 1;
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:268

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
     8f0:	41 15       	cp	r20, r1
     8f2:	51 05       	cpc	r21, r1
     8f4:	b1 f0       	breq	.+44     	; 0x922 <__stack+0x23>
     8f6:	7b 01       	movw	r14, r22
     8f8:	ec 01       	movw	r28, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:266
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
     8fa:	0c 81       	ldd	r16, Y+4	; 0x04
     8fc:	1d 81       	ldd	r17, Y+5	; 0x05
     8fe:	04 0f       	add	r16, r20
     900:	15 1f       	adc	r17, r21
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:269
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
     902:	b8 01       	movw	r22, r16
     904:	0e 94 3f 04 	call	0x87e	; 0x87e <String::reserve(unsigned int)>
     908:	88 23       	and	r24, r24
     90a:	51 f3       	breq	.-44     	; 0x8e0 <String::concat(char const*, unsigned int)+0x12>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:270
  strcpy(buffer + len, cstr);
     90c:	28 81       	ld	r18, Y
     90e:	39 81       	ldd	r19, Y+1	; 0x01
     910:	8c 81       	ldd	r24, Y+4	; 0x04
     912:	9d 81       	ldd	r25, Y+5	; 0x05
     914:	b7 01       	movw	r22, r14
     916:	82 0f       	add	r24, r18
     918:	93 1f       	adc	r25, r19
     91a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcpy>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:271
  len = newlen;
     91e:	1d 83       	std	Y+5, r17	; 0x05
     920:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:268

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	de cf       	rjmp	.-68     	; 0x8e2 <String::concat(char const*, unsigned int)+0x14>

00000926 <String::copy(char const*, unsigned int)>:
copy():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:172
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ec 01       	movw	r28, r24
     934:	7b 01       	movw	r14, r22
     936:	8a 01       	movw	r16, r20
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:173
  if (!reserve(length)) {
     938:	ba 01       	movw	r22, r20
     93a:	0e 94 3f 04 	call	0x87e	; 0x87e <String::reserve(unsigned int)>
     93e:	81 11       	cpse	r24, r1
     940:	0b c0       	rjmp	.+22     	; 0x958 <String::copy(char const*, unsigned int)+0x32>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:174
    invalidate();
     942:	ce 01       	movw	r24, r28
     944:	0e 94 25 04 	call	0x84a	; 0x84a <String::invalidate()>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:180
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     948:	ce 01       	movw	r24, r28
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	08 95       	ret
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     958:	1d 83       	std	Y+5, r17	; 0x05
     95a:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     95c:	b7 01       	movw	r22, r14
     95e:	88 81       	ld	r24, Y
     960:	99 81       	ldd	r25, Y+1	; 0x01
     962:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcpy>
     966:	f0 cf       	rjmp	.-32     	; 0x948 <String::copy(char const*, unsigned int)+0x22>

00000968 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     968:	fb 01       	movw	r30, r22
     96a:	01 90       	ld	r0, Z+
     96c:	00 20       	and	r0, r0
     96e:	e9 f7       	brne	.-6      	; 0x96a <String::operator=(char const*) [clone .part.3]+0x2>
     970:	31 97       	sbiw	r30, 0x01	; 1
     972:	af 01       	movw	r20, r30
     974:	46 1b       	sub	r20, r22
     976:	57 0b       	sbc	r21, r23
     978:	0c 94 93 04 	jmp	0x926	; 0x926 <String::copy(char const*, unsigned int)>

0000097c <String::String(char const*)>:
_ZN6String4initEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     97c:	fc 01       	movw	r30, r24
     97e:	11 82       	std	Z+1, r1	; 0x01
     980:	10 82       	st	Z, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     982:	13 82       	std	Z+3, r1	; 0x03
     984:	12 82       	std	Z+2, r1	; 0x02
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
     986:	15 82       	std	Z+5, r1	; 0x05
     988:	14 82       	std	Z+4, r1	; 0x04
__base_ctor ():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     98a:	fb 01       	movw	r30, r22
     98c:	01 90       	ld	r0, Z+
     98e:	00 20       	and	r0, r0
     990:	e9 f7       	brne	.-6      	; 0x98c <String::String(char const*)+0x10>
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	af 01       	movw	r20, r30
     996:	46 1b       	sub	r20, r22
     998:	57 0b       	sbc	r21, r23
     99a:	0c 94 93 04 	jmp	0x926	; 0x926 <String::copy(char const*, unsigned int)>

0000099e <__vector_16>:
__vector_16():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     99e:	1f 92       	push	r1
     9a0:	0f 92       	push	r0
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	0f 92       	push	r0
     9a6:	11 24       	eor	r1, r1
     9a8:	2f 93       	push	r18
     9aa:	3f 93       	push	r19
     9ac:	8f 93       	push	r24
     9ae:	9f 93       	push	r25
     9b0:	af 93       	push	r26
     9b2:	bf 93       	push	r27
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     9b4:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer0_millis>
     9b8:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer0_millis+0x1>
     9bc:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer0_millis+0x2>
     9c0:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer0_millis+0x3>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     9c4:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <timer0_fract>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     9c8:	26 e0       	ldi	r18, 0x06	; 6
     9ca:	23 0f       	add	r18, r19
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     9cc:	2d 37       	cpi	r18, 0x7D	; 125
     9ce:	68 f1       	brcs	.+90     	; 0xa2a <__vector_16+0x8c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     9d0:	29 e8       	ldi	r18, 0x89	; 137
     9d2:	23 0f       	add	r18, r19
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     9d4:	03 96       	adiw	r24, 0x03	; 3
     9d6:	a1 1d       	adc	r26, r1
     9d8:	b1 1d       	adc	r27, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     9da:	20 93 36 02 	sts	0x0236, r18	; 0x800236 <timer0_fract>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     9de:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <timer0_millis>
     9e2:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <timer0_millis+0x1>
     9e6:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <timer0_millis+0x2>
     9ea:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <timer0_millis+0x3>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     9ee:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <timer0_overflow_count>
     9f2:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <timer0_overflow_count+0x1>
     9f6:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <timer0_overflow_count+0x2>
     9fa:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <timer0_overflow_count+0x3>
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	a1 1d       	adc	r26, r1
     a02:	b1 1d       	adc	r27, r1
     a04:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <timer0_overflow_count>
     a08:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <timer0_overflow_count+0x1>
     a0c:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <timer0_overflow_count+0x2>
     a10:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <timer0_overflow_count+0x3>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     a2a:	02 96       	adiw	r24, 0x02	; 2
     a2c:	a1 1d       	adc	r26, r1
     a2e:	b1 1d       	adc	r27, r1
     a30:	d4 cf       	rjmp	.-88     	; 0x9da <__vector_16+0x3c>

00000a32 <__vector_2>:
__vector_2():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
     a54:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
     a58:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
     a5c:	09 95       	icall
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <__vector_1>:
__vector_1():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
     aa2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     aa6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     aaa:	09 95       	icall
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <__vector_19>:
__vector_19():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     af0:	8f e3       	ldi	r24, 0x3F	; 63
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_18>:
__vector_18():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b2e:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <Serial+0x10>
     b32:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <Serial+0x11>
     b36:	80 81       	ld	r24, Z
     b38:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <Serial+0x16>
     b3c:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <Serial+0x17>
     b40:	82 fd       	sbrc	r24, 2
     b42:	1b c0       	rjmp	.+54     	; 0xb7a <__vector_18+0x60>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b44:	90 81       	ld	r25, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b46:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Serial+0x19>
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     b4e:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <Serial+0x1a>
     b52:	82 17       	cp	r24, r18
     b54:	41 f0       	breq	.+16     	; 0xb66 <__vector_18+0x4c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     b56:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <Serial+0x19>
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	e1 5c       	subi	r30, 0xC1	; 193
     b5e:	fd 4f       	sbci	r31, 0xFD	; 253
     b60:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     b62:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <Serial+0x19>
__vector_18():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti
_rx_complete_irq():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     b7a:	80 81       	ld	r24, Z
     b7c:	f4 cf       	rjmp	.-24     	; 0xb66 <__vector_18+0x4c>

00000b7e <__vector_3>:
__vector_3():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     ba0:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <SoftwareSerial::active_object>
     ba4:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <SoftwareSerial::active_object+0x1>
     ba8:	30 97       	sbiw	r30, 0x00	; 0
     baa:	49 f0       	breq	.+18     	; 0xbbe <__vector_3+0x40>
     bac:	a6 85       	ldd	r26, Z+14	; 0x0e
     bae:	b7 85       	ldd	r27, Z+15	; 0x0f
     bb0:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     bb2:	96 8d       	ldd	r25, Z+30	; 0x1e
     bb4:	91 ff       	sbrs	r25, 1
     bb6:	14 c0       	rjmp	.+40     	; 0xbe0 <__vector_3+0x62>
rx_pin_read():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     bb8:	9c 91       	ld	r25, X
     bba:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     bbc:	a1 f4       	brne	.+40     	; 0xbe6 <__vector_3+0x68>
__vector_3():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti
rx_pin_read():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     be0:	9c 91       	ld	r25, X
     be2:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     be4:	61 f7       	brne	.-40     	; 0xbbe <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     be6:	a3 89       	ldd	r26, Z+19	; 0x13
     be8:	b4 89       	ldd	r27, Z+20	; 0x14
     bea:	9c 91       	ld	r25, X
     bec:	85 89       	ldd	r24, Z+21	; 0x15
     bee:	80 95       	com	r24
     bf0:	89 23       	and	r24, r25
     bf2:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     bf4:	86 89       	ldd	r24, Z+22	; 0x16
     bf6:	97 89       	ldd	r25, Z+23	; 0x17
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     bfc:	60 8d       	ldd	r22, Z+24	; 0x18
     bfe:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     c00:	a6 85       	ldd	r26, Z+14	; 0x0e
     c02:	b7 85       	ldd	r27, Z+15	; 0x0f
     c04:	55 85       	ldd	r21, Z+13	; 0x0d
     c06:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif

  uint8_t d = 0;
     c08:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     c0a:	cb 01       	movw	r24, r22
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     c10:	82 2f       	mov	r24, r18
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	95 95       	asr	r25
     c16:	87 95       	ror	r24
     c18:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     c1a:	4c 91       	ld	r20, X
     c1c:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     c1e:	09 f0       	breq	.+2      	; 0xc22 <__vector_3+0xa4>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
     c20:	20 68       	ori	r18, 0x80	; 128
     c22:	31 50       	subi	r19, 0x01	; 1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     c24:	91 f7       	brne	.-28     	; 0xc0a <__vector_3+0x8c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     c26:	86 8d       	ldd	r24, Z+30	; 0x1e
     c28:	81 fd       	sbrc	r24, 1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
     c2a:	20 95       	com	r18
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     c2c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <SoftwareSerial::_receive_buffer_tail>
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	8f 73       	andi	r24, 0x3F	; 63
     c36:	99 27       	eor	r25, r25
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
     c38:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <SoftwareSerial::_receive_buffer_head>
     c3c:	38 17       	cp	r19, r24
     c3e:	99 f0       	breq	.+38     	; 0xc66 <__vector_3+0xe8>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     c40:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <SoftwareSerial::_receive_buffer_tail>
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	a0 51       	subi	r26, 0x10	; 16
     c48:	be 4f       	sbci	r27, 0xFE	; 254
     c4a:	2c 93       	st	X, r18
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
     c4c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     c50:	82 8d       	ldd	r24, Z+26	; 0x1a
     c52:	93 8d       	ldd	r25, Z+27	; 0x1b
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     c58:	a3 89       	ldd	r26, Z+19	; 0x13
     c5a:	b4 89       	ldd	r27, Z+20	; 0x14
     c5c:	8c 91       	ld	r24, X
     c5e:	95 89       	ldd	r25, Z+21	; 0x15
     c60:	89 2b       	or	r24, r25
     c62:	8c 93       	st	X, r24
     c64:	ac cf       	rjmp	.-168    	; 0xbbe <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    }
    else
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     c66:	86 8d       	ldd	r24, Z+30	; 0x1e
     c68:	81 60       	ori	r24, 0x01	; 1
     c6a:	86 8f       	std	Z+30, r24	; 0x1e
     c6c:	f1 cf       	rjmp	.-30     	; 0xc50 <__vector_3+0xd2>

00000c6e <global constructors keyed to 65535_0_GPS_Main.cpp.o.2881>:
_GLOBAL__I_65535_0_GPS_Main.cpp.o.2881():
     c6e:	cf 93       	push	r28
     c70:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <Serial+0x3>
     c74:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <Serial+0x2>
     c78:	88 ee       	ldi	r24, 0xE8	; 232
     c7a:	93 e0       	ldi	r25, 0x03	; 3
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Serial+0x4>
     c84:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <Serial+0x5>
     c88:	a0 93 45 02 	sts	0x0245, r26	; 0x800245 <Serial+0x6>
     c8c:	b0 93 46 02 	sts	0x0246, r27	; 0x800246 <Serial+0x7>
     c90:	2e e0       	ldi	r18, 0x0E	; 14
     c92:	31 e0       	ldi	r19, 0x01	; 1
     c94:	30 93 40 02 	sts	0x0240, r19	; 0x800240 <Serial+0x1>
     c98:	20 93 3f 02 	sts	0x023F, r18	; 0x80023f <Serial>
     c9c:	25 ec       	ldi	r18, 0xC5	; 197
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	30 93 4c 02 	sts	0x024C, r19	; 0x80024c <Serial+0xd>
     ca4:	20 93 4b 02 	sts	0x024B, r18	; 0x80024b <Serial+0xc>
     ca8:	24 ec       	ldi	r18, 0xC4	; 196
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	30 93 4e 02 	sts	0x024E, r19	; 0x80024e <Serial+0xf>
     cb0:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <Serial+0xe>
     cb4:	20 ec       	ldi	r18, 0xC0	; 192
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	30 93 50 02 	sts	0x0250, r19	; 0x800250 <Serial+0x11>
     cbc:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <Serial+0x10>
     cc0:	21 ec       	ldi	r18, 0xC1	; 193
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	30 93 52 02 	sts	0x0252, r19	; 0x800252 <Serial+0x13>
     cc8:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <Serial+0x12>
     ccc:	22 ec       	ldi	r18, 0xC2	; 194
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	30 93 54 02 	sts	0x0254, r19	; 0x800254 <Serial+0x15>
     cd4:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <Serial+0x14>
     cd8:	26 ec       	ldi	r18, 0xC6	; 198
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	30 93 56 02 	sts	0x0256, r19	; 0x800256 <Serial+0x17>
     ce0:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <Serial+0x16>
     ce4:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <Serial+0x19>
     ce8:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <Serial+0x1a>
     cec:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <Serial+0x1b>
     cf0:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <Serial+0x1c>
     cf4:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <LoRa+0x3>
     cf8:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <LoRa+0x2>
     cfc:	20 e2       	ldi	r18, 0x20	; 32
     cfe:	31 e0       	ldi	r19, 0x01	; 1
     d00:	30 93 de 02 	sts	0x02DE, r19	; 0x8002de <LoRa+0x1>
     d04:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <LoRa>
     d08:	20 e5       	ldi	r18, 0x50	; 80
     d0a:	20 93 e9 02 	sts	0x02E9, r18	; 0x8002e9 <LoRa+0xc>
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <LoRa+0xd>
     d14:	2c ed       	ldi	r18, 0xDC	; 220
     d16:	32 e0       	ldi	r19, 0x02	; 2
     d18:	30 93 ec 02 	sts	0x02EC, r19	; 0x8002ec <LoRa+0xf>
     d1c:	20 93 eb 02 	sts	0x02EB, r18	; 0x8002eb <LoRa+0xe>
     d20:	2a e0       	ldi	r18, 0x0A	; 10
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	30 93 ee 02 	sts	0x02EE, r19	; 0x8002ee <LoRa+0x11>
     d28:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <LoRa+0x10>
     d2c:	29 e0       	ldi	r18, 0x09	; 9
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <LoRa+0x13>
     d34:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <LoRa+0x12>
     d38:	22 e0       	ldi	r18, 0x02	; 2
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	30 93 f2 02 	sts	0x02F2, r19	; 0x8002f2 <LoRa+0x15>
     d40:	20 93 f1 02 	sts	0x02F1, r18	; 0x8002f1 <LoRa+0x14>
     d44:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <LoRa+0x16>
     d48:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <LoRa+0x17>
     d4c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <LoRa+0x18>
     d50:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <LoRa+0x19>
     d54:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <LoRa+0x1b>
     d58:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <LoRa+0x1a>
     d5c:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <LoRa+0x1d>
     d60:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <LoRa+0x1c>
     d64:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <LoRa+0x1f>
     d68:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <LoRa+0x1e>
     d6c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <LoRa+0x21>
     d70:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <LoRa+0x20>
     d74:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <LoRa+0x4>
     d78:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <LoRa+0x5>
     d7c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <LoRa+0x6>
     d80:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <LoRa+0x7>
     d84:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <gsm+0x3>
     d88:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <gsm+0x2>
     d8c:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <gsm+0x4>
     d90:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <gsm+0x5>
     d94:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <gsm+0x6>
     d98:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <gsm+0x7>
     d9c:	82 e3       	ldi	r24, 0x32	; 50
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <gsm+0x1>
     da4:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <gsm>
     da8:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <gsm+0x17>
     dac:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <gsm+0x16>
     db0:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <gsm+0x19>
     db4:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <gsm+0x18>
     db8:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <gsm+0x1b>
     dbc:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <gsm+0x1a>
     dc0:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <gsm+0x1d>
     dc4:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <gsm+0x1c>
     dc8:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gsm+0x1e>
     dcc:	8e 7f       	andi	r24, 0xFE	; 254
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <gsm+0x1e>
     dd4:	86 95       	lsr	r24
     dd6:	81 70       	andi	r24, 0x01	; 1
     dd8:	68 27       	eor	r22, r24
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	0e 94 92 00 	call	0x124	; 0x124 <digitalWrite>
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinMode>
     de8:	e7 eb       	ldi	r30, 0xB7	; 183
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	e4 91       	lpm	r30, Z
     dee:	e0 93 02 04 	sts	0x0402, r30	; 0x800402 <gsm+0x10>
     df2:	e0 ea       	ldi	r30, 0xA0	; 160
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	e4 91       	lpm	r30, Z
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	ed 56       	subi	r30, 0x6D	; 109
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	85 91       	lpm	r24, Z+
     e04:	94 91       	lpm	r25, Z
     e06:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <gsm+0x12>
     e0a:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <gsm+0x11>
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinMode>
     e16:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gsm+0x1e>
     e1a:	81 fd       	sbrc	r24, 1
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <global constructors keyed to 65535_0_GPS_Main.cpp.o.2881+0x1b8>
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	0e 94 92 00 	call	0x124	; 0x124 <digitalWrite>
     e26:	c2 e0       	ldi	r28, 0x02	; 2
     e28:	c0 93 fe 03 	sts	0x03FE, r28	; 0x8003fe <gsm+0xc>
     e2c:	e6 eb       	ldi	r30, 0xB6	; 182
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	e4 91       	lpm	r30, Z
     e32:	e0 93 ff 03 	sts	0x03FF, r30	; 0x8003ff <gsm+0xd>
     e36:	ef e9       	ldi	r30, 0x9F	; 159
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	e4 91       	lpm	r30, Z
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	ee 0f       	add	r30, r30
     e40:	ff 1f       	adc	r31, r31
     e42:	e7 57       	subi	r30, 0x77	; 119
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	85 91       	lpm	r24, Z+
     e48:	94 91       	lpm	r25, Z
     e4a:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <gsm+0xf>
     e4e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <gsm+0xe>
     e52:	62 e4       	ldi	r22, 0x42	; 66
     e54:	71 e0       	ldi	r23, 0x01	; 1
     e56:	8c ee       	ldi	r24, 0xEC	; 236
     e58:	93 e0       	ldi	r25, 0x03	; 3
     e5a:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
     e5e:	63 e4       	ldi	r22, 0x43	; 67
     e60:	71 e0       	ldi	r23, 0x01	; 1
     e62:	86 ee       	ldi	r24, 0xE6	; 230
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
     e6a:	62 e4       	ldi	r22, 0x42	; 66
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	80 ee       	ldi	r24, 0xE0	; 224
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
     e76:	62 e4       	ldi	r22, 0x42	; 66
     e78:	71 e0       	ldi	r23, 0x01	; 1
     e7a:	8a ed       	ldi	r24, 0xDA	; 218
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
     e82:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <gpsClient>
     e86:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <gpsClient+0x1>
     e8a:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <gpsClient+0x3>
     e8e:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <gpsClient+0x2>
     e92:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <gpsClient+0x4>
     e96:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <gpsClient+0x5>
     e9a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <gpsClient+0x6>
     e9e:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <gpsClient+0x7>
     ea2:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <gpsClient+0x8>
     ea6:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <gpsClient+0xa>
     eaa:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <gpsClient+0x9>
     eae:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <gpsClient+0xb>
     eb2:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <gpsClient+0xc>
     eb6:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <gpsClient+0xd>
     eba:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <gpsClient+0xe>
     ebe:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <gpsClient+0xf>
     ec2:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <gpsClient+0x11>
     ec6:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <gpsClient+0x10>
     eca:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <gpsClient+0x12>
     ece:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <gpsClient+0x13>
     ed2:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <gpsClient+0x14>
     ed6:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <gpsClient+0x15>
     eda:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <gpsClient+0x16>
     ede:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <gpsClient+0x18>
     ee2:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <gpsClient+0x17>
     ee6:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <gpsClient+0x19>
     eea:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <gpsClient+0x1a>
     eee:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <gpsClient+0x1b>
     ef2:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <gpsClient+0x1c>
     ef6:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <gpsClient+0x1d>
     efa:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <gpsClient+0x22>
     efe:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <gpsClient+0x23>
     f02:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <gpsClient+0x24>
     f06:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <gpsClient+0x25>
     f0a:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <gpsClient+0x26>
     f0e:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <gpsClient+0x27>
     f12:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <gpsClient+0x30>
     f16:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <gpsClient+0x31>
     f1a:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <gpsClient+0x32>
     f1e:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <gpsClient+0x33>
     f22:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <gpsClient+0x34>
     f26:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <gpsClient+0x35>
     f2a:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <gpsClient+0x3e>
     f2e:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <gpsClient+0x3f>
     f32:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <gpsClient+0x44>
     f36:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <gpsClient+0x45>
     f3a:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <gpsClient+0x46>
     f3e:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <gpsClient+0x47>
     f42:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <gpsClient+0x4c>
     f46:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <gpsClient+0x4d>
     f4a:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <gpsClient+0x52>
     f4e:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <gpsClient+0x53>
     f52:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <gpsClient+0x54>
     f56:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <gpsClient+0x55>
     f5a:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <gpsClient+0x5a>
     f5e:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <gpsClient+0x5b>
     f62:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <gpsClient+0x60>
     f66:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <gpsClient+0x61>
     f6a:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <gpsClient+0x62>
     f6e:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <gpsClient+0x63>
     f72:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <gpsClient+0x68>
     f76:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <gpsClient+0x69>
     f7a:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <gpsClient+0x6e>
     f7e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <gpsClient+0x6f>
     f82:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <gpsClient+0x70>
     f86:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <gpsClient+0x71>
     f8a:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <gpsClient+0x76>
     f8e:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <gpsClient+0x77>
     f92:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <gpsClient+0x7c>
     f96:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <gpsClient+0x7d>
     f9a:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <gpsClient+0x7e>
     f9e:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <gpsClient+0x7f>
     fa2:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <gpsClient+0x84>
     fa6:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <gpsClient+0x85>
     faa:	c0 93 c2 03 	sts	0x03C2, r28	; 0x8003c2 <gpsClient+0x95>
     fae:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <gpsClient+0x96>
     fb2:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <gpsClient+0x97>
     fb6:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <gpsClient+0x98>
     fba:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <gpsClient+0x9a>
     fbe:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <gpsClient+0x99>
     fc2:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <gpsClient+0x9c>
     fc6:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <gpsClient+0x9b>
     fca:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <gpsClient+0x9d>
     fce:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <gpsClient+0x9e>
     fd2:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <gpsClient+0x9f>
     fd6:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <gpsClient+0xa0>
     fda:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <gpsClient+0xa1>
     fde:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <gpsClient+0xa2>
     fe2:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <gpsClient+0xa3>
     fe6:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <gpsClient+0xa4>
     fea:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <gpsClient+0xa5>
     fee:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <gpsClient+0xa6>
     ff2:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <gpsClient+0xa7>
     ff6:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <gpsClient+0xa8>
     ffa:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <gpsClient+0xa9>
     ffe:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <gpsClient+0xaa>
    1002:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <gpsClient+0xab>
    1006:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <gpsClient+0xac>
    100a:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <gpsClient+0x86>
    100e:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <gpsObj+0x1>
    1012:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <gpsObj>
    1016:	e1 e0       	ldi	r30, 0x01	; 1
    1018:	f3 e0       	ldi	r31, 0x03	; 3
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	df 01       	movw	r26, r30
    101e:	1d 92       	st	X+, r1
    1020:	8a 95       	dec	r24
    1022:	e9 f7       	brne	.-6      	; 0x101e <global constructors keyed to 65535_0_GPS_Main.cpp.o.2881+0x3b0>
    1024:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <gpsObj+0x7>
    1028:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <gpsObj+0x6>
    102c:	89 e0       	ldi	r24, 0x09	; 9
    102e:	e7 e0       	ldi	r30, 0x07	; 7
    1030:	f3 e0       	ldi	r31, 0x03	; 3
    1032:	df 01       	movw	r26, r30
    1034:	98 2f       	mov	r25, r24
    1036:	1d 92       	st	X+, r1
    1038:	9a 95       	dec	r25
    103a:	e9 f7       	brne	.-6      	; 0x1036 <global constructors keyed to 65535_0_GPS_Main.cpp.o.2881+0x3c8>
    103c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <gpsObj+0x12>
    1040:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <gpsObj+0x11>
    1044:	e2 e1       	ldi	r30, 0x12	; 18
    1046:	f3 e0       	ldi	r31, 0x03	; 3
    1048:	df 01       	movw	r26, r30
    104a:	98 2f       	mov	r25, r24
    104c:	1d 92       	st	X+, r1
    104e:	9a 95       	dec	r25
    1050:	e9 f7       	brne	.-6      	; 0x104c <global constructors keyed to 65535_0_GPS_Main.cpp.o.2881+0x3de>
    1052:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <gpsObj+0x1d>
    1056:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <gpsObj+0x1c>
    105a:	ed e1       	ldi	r30, 0x1D	; 29
    105c:	f3 e0       	ldi	r31, 0x03	; 3
    105e:	df 01       	movw	r26, r30
    1060:	1d 92       	st	X+, r1
    1062:	8a 95       	dec	r24
    1064:	e9 f7       	brne	.-6      	; 0x1060 <global constructors keyed to 65535_0_GPS_Main.cpp.o.2881+0x3f2>
    1066:	8d e2       	ldi	r24, 0x2D	; 45
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <gpsObj+0x28>
    106e:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <gpsObj+0x27>
    1072:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <gpsObj+0x29>
    1076:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <gpsObj+0x2a>
    107a:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <gpsObj+0x2b>
    107e:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <gpsObj+0x2d>
    1082:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <gpsObj+0x2c>
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <main>:
main():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	62 97       	sbiw	r28, 0x12	; 18
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    109e:	78 94       	sei
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    10a0:	84 b5       	in	r24, 0x24	; 36
    10a2:	83 60       	ori	r24, 0x03	; 3
    10a4:	84 bd       	out	0x24, r24	; 36
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    10a6:	85 b5       	in	r24, 0x25	; 37
    10a8:	83 60       	ori	r24, 0x03	; 3
    10aa:	85 bd       	out	0x25, r24	; 37
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    10ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    10b0:	81 60       	ori	r24, 0x01	; 1
    10b2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    10bc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    10c0:	81 60       	ori	r24, 0x01	; 1
    10c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    10c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    10d0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    10da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    10e4:	86 e8       	ldi	r24, 0x86	; 134
    10e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    10ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
begin():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    10ee:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <Serial+0x10>
    10f2:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <Serial+0x11>
    10f6:	90 83       	st	Z, r25
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    10f8:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <Serial+0xc>
    10fc:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <Serial+0xd>
    1100:	10 82       	st	Z, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    1102:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <Serial+0xe>
    1106:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <Serial+0xf>
    110a:	87 e6       	ldi	r24, 0x67	; 103
    110c:	80 83       	st	Z, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    110e:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <Serial+0x18>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1112:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <Serial+0x14>
    1116:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <Serial+0x15>
    111a:	86 e0       	ldi	r24, 0x06	; 6
    111c:	80 83       	st	Z, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    111e:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <Serial+0x12>
    1122:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <Serial+0x13>
    1126:	80 81       	ld	r24, Z
    1128:	88 69       	ori	r24, 0x98	; 152
    112a:	80 83       	st	Z, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    112c:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <Serial+0x12>
    1130:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <Serial+0x13>
    1134:	80 81       	ld	r24, Z
    1136:	8f 7d       	andi	r24, 0xDF	; 223
    1138:	80 83       	st	Z, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    113a:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <gsm+0x1b>
    113e:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <gsm+0x1a>
    1142:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <gsm+0x19>
    1146:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <gsm+0x18>
    114a:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <gsm+0x17>
    114e:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <gsm+0x16>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    1152:	8d ec       	ldi	r24, 0xCD	; 205
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <gsm+0x1d>
    115a:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <gsm+0x1c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    115e:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <gsm+0xc>
    1162:	87 31       	cpi	r24, 0x17	; 23
    1164:	08 f0       	brcs	.+2      	; 0x1168 <main+0xde>
    1166:	4b c0       	rjmp	.+150    	; 0x11fe <main+0x174>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1168:	25 e5       	ldi	r18, 0x55	; 85
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	30 93 09 04 	sts	0x0409, r19	; 0x800409 <gsm+0x17>
    1170:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <gsm+0x16>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1174:	2b ec       	ldi	r18, 0xCB	; 203
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <gsm+0x19>
    117c:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <gsm+0x18>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1180:	20 e9       	ldi	r18, 0x90	; 144
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	30 93 0d 04 	sts	0x040D, r19	; 0x80040d <gsm+0x1b>
    1188:	20 93 0c 04 	sts	0x040C, r18	; 0x80040c <gsm+0x1a>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    118c:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
    1190:	94 e0       	ldi	r25, 0x04	; 4
begin():
    1192:	88 30       	cpi	r24, 0x08	; 8
    1194:	54 f0       	brlt	.+20     	; 0x11aa <main+0x120>
main():
    1196:	91 e0       	ldi	r25, 0x01	; 1
begin():
    1198:	8e 30       	cpi	r24, 0x0E	; 14
    119a:	3c f0       	brlt	.+14     	; 0x11aa <main+0x120>
main():
    119c:	92 e0       	ldi	r25, 0x02	; 2
begin():
    119e:	84 31       	cpi	r24, 0x14	; 20
    11a0:	24 f0       	brlt	.+8      	; 0x11aa <main+0x120>
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	86 31       	cpi	r24, 0x16	; 22
    11a6:	09 f4       	brne	.+2      	; 0x11aa <main+0x120>
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	92 2b       	or	r25, r18
    11ac:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    11b0:	2d e6       	ldi	r18, 0x6D	; 109
    11b2:	30 e0       	ldi	r19, 0x00	; 0
begin():
    11b4:	88 30       	cpi	r24, 0x08	; 8
    11b6:	74 f0       	brlt	.+28     	; 0x11d4 <main+0x14a>
    11b8:	8e 30       	cpi	r24, 0x0E	; 14
    11ba:	0c f4       	brge	.+2      	; 0x11be <main+0x134>
    11bc:	6b c2       	rjmp	.+1238   	; 0x1694 <main+0x60a>
    11be:	84 31       	cpi	r24, 0x14	; 20
    11c0:	3c f0       	brlt	.+14     	; 0x11d0 <main+0x146>
    11c2:	86 31       	cpi	r24, 0x16	; 22
    11c4:	0c f4       	brge	.+2      	; 0x11c8 <main+0x13e>
    11c6:	66 c2       	rjmp	.+1228   	; 0x1694 <main+0x60a>
main():
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	20 e0       	ldi	r18, 0x00	; 0
begin():
    11cc:	86 31       	cpi	r24, 0x16	; 22
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <main+0x14a>
main():
    11d0:	2c e6       	ldi	r18, 0x6C	; 108
    11d2:	30 e0       	ldi	r19, 0x00	; 0
begin():
    11d4:	30 93 06 04 	sts	0x0406, r19	; 0x800406 <gsm+0x14>
    11d8:	20 93 05 04 	sts	0x0405, r18	; 0x800405 <gsm+0x13>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    11dc:	88 30       	cpi	r24, 0x08	; 8
    11de:	0c f0       	brlt	.+2      	; 0x11e2 <main+0x158>
    11e0:	5c c2       	rjmp	.+1208   	; 0x169a <main+0x610>
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <main+0x15e>
    11e6:	99 0f       	add	r25, r25
    11e8:	8a 95       	dec	r24
    11ea:	ea f7       	brpl	.-6      	; 0x11e6 <main+0x15c>
    11ec:	89 2f       	mov	r24, r25
    11ee:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gsm+0x15>
_delay_loop_2():
c:\users\urosm\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    11f2:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <gsm+0x1c>
    11f6:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <gsm+0x1d>
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <main+0x170>
listen():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    11fe:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <gsm+0x1a>
    1202:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <gsm+0x1b>
    1206:	89 2b       	or	r24, r25
    1208:	49 f1       	breq	.+82     	; 0x125c <main+0x1d2>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    120a:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <SoftwareSerial::active_object>
    120e:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <SoftwareSerial::active_object+0x1>
    1212:	23 e0       	ldi	r18, 0x03	; 3
    1214:	e2 3f       	cpi	r30, 0xF2	; 242
    1216:	f2 07       	cpc	r31, r18
    1218:	09 f1       	breq	.+66     	; 0x125c <main+0x1d2>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    121a:	30 97       	sbiw	r30, 0x00	; 0
    121c:	39 f0       	breq	.+14     	; 0x122c <main+0x1a2>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    121e:	a3 89       	ldd	r26, Z+19	; 0x13
    1220:	b4 89       	ldd	r27, Z+20	; 0x14
    1222:	9c 91       	ld	r25, X
    1224:	85 89       	ldd	r24, Z+21	; 0x15
    1226:	80 95       	com	r24
    1228:	89 23       	and	r24, r25
    122a:	8c 93       	st	X, r24
listen():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    122c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gsm+0x1e>
    1230:	8e 7f       	andi	r24, 0xFE	; 254
    1232:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <gsm+0x1e>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    1236:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <SoftwareSerial::_receive_buffer_tail>
    123a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <SoftwareSerial::_receive_buffer_head>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    123e:	82 ef       	ldi	r24, 0xF2	; 242
    1240:	93 e0       	ldi	r25, 0x03	; 3
    1242:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <SoftwareSerial::active_object+0x1>
    1246:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    124a:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <gsm+0x13>
    124e:	f0 91 06 04 	lds	r31, 0x0406	; 0x800406 <gsm+0x14>
    1252:	80 81       	ld	r24, Z
    1254:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <gsm+0x15>
    1258:	89 2b       	or	r24, r25
    125a:	80 83       	st	Z, r24
setPins():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:653
  return readRegister(REG_RSSI_WIDEBAND);
}

void LoRaClass::setPins(int ss, int reset, int dio0)
{
  _ss = ss;
    125c:	8a e0       	ldi	r24, 0x0A	; 10
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <LoRa+0x11>
    1264:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <LoRa+0x10>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:654
  _reset = reset;
    1268:	8f e0       	ldi	r24, 0x0F	; 15
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <LoRa+0x13>
    1270:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <LoRa+0x12>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:655
  _dio0 = dio0;
    1274:	80 e1       	ldi	r24, 0x10	; 16
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <LoRa+0x15>
    127c:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <LoRa+0x14>
begin():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:105
  digitalWrite(LORA_RESET, HIGH);
  delay(50);
#endif

  // setup pins
  pinMode(_ss, OUTPUT);
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	8a e0       	ldi	r24, 0x0A	; 10
    1284:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinMode>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:107
  // set SS high
  digitalWrite(_ss, HIGH);
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <LoRa+0x10>
    128e:	0e 94 92 00 	call	0x124	; 0x124 <digitalWrite>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:109

  if (_reset != -1) {
    1292:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <LoRa+0x12>
    1296:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <LoRa+0x13>
    129a:	8f 3f       	cpi	r24, 0xFF	; 255
    129c:	98 07       	cpc	r25, r24
    129e:	c9 f0       	breq	.+50     	; 0x12d2 <main+0x248>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:110
    pinMode(_reset, OUTPUT);
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinMode>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:113

    // perform reset
    digitalWrite(_reset, LOW);
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <LoRa+0x12>
    12ac:	0e 94 92 00 	call	0x124	; 0x124 <digitalWrite>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:114
    delay(10);
    12b0:	6a e0       	ldi	r22, 0x0A	; 10
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 34 01 	call	0x268	; 0x268 <delay>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:115
    digitalWrite(_reset, HIGH);
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <LoRa+0x12>
    12c2:	0e 94 92 00 	call	0x124	; 0x124 <digitalWrite>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:116
    delay(10);
    12c6:	6a e0       	ldi	r22, 0x0A	; 10
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 34 01 	call	0x268	; 0x268 <delay>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
    12d2:	1f b7       	in	r17, 0x3f	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    12d4:	f8 94       	cli
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
    12d6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIClass::initialized>
    12da:	81 11       	cpse	r24, r1
    12dc:	27 c0       	rjmp	.+78     	; 0x132c <main+0x2a2>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    12de:	e7 ea       	ldi	r30, 0xA7	; 167
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	84 91       	lpm	r24, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    12e4:	ee eb       	ldi	r30, 0xBE	; 190
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	94 91       	lpm	r25, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    12ea:	e8 2f       	mov	r30, r24
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	e8 59       	subi	r30, 0x98	; 152
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	a5 91       	lpm	r26, Z+
    12f8:	b4 91       	lpm	r27, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    12fa:	ec 91       	ld	r30, X
    12fc:	e9 23       	and	r30, r25
    12fe:	21 f4       	brne	.+8      	; 0x1308 <main+0x27e>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	8a e0       	ldi	r24, 0x0A	; 10
    1304:	0e 94 92 00 	call	0x124	; 0x124 <digitalWrite>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	8a e0       	ldi	r24, 0x0A	; 10
    130c:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinMode>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1310:	8c b5       	in	r24, 0x2c	; 44
    1312:	80 61       	ori	r24, 0x10	; 16
    1314:	8c bd       	out	0x2c, r24	; 44
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
    1316:	8c b5       	in	r24, 0x2c	; 44
    1318:	80 64       	ori	r24, 0x40	; 64
    131a:	8c bd       	out	0x2c, r24	; 44
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	8d e0       	ldi	r24, 0x0D	; 13
    1320:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinMode>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	8b e0       	ldi	r24, 0x0B	; 11
    1328:	0e 94 de 00 	call	0x1bc	; 0x1bc <pinMode>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
    132c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIClass::initialized>
    1330:	8f 5f       	subi	r24, 0xFF	; 255
    1332:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIClass::initialized>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
    1336:	1f bf       	out	0x3f, r17	; 63
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:123

  // start SPI
  _spi->begin();

  // check version
  uint8_t version = readRegister(REG_VERSION);
    1338:	62 e4       	ldi	r22, 0x42	; 66
    133a:	8d ed       	ldi	r24, 0xDD	; 221
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:124
  if (version != 0x12) {
    1342:	82 31       	cpi	r24, 0x12	; 18
    1344:	09 f0       	breq	.+2      	; 0x1348 <main+0x2be>
    1346:	5a c0       	rjmp	.+180    	; 0x13fc <main+0x372>
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	61 e8       	ldi	r22, 0x81	; 129
    134c:	8d ed       	ldi	r24, 0xDD	; 221
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
setFrequency():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:464
  }
}

void LoRaClass::setFrequency(long frequency)
{
  _frequency = frequency;
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	98 e3       	ldi	r25, 0x38	; 56
    1358:	ac e9       	ldi	r26, 0x9C	; 156
    135a:	bc e1       	ldi	r27, 0x1C	; 28
    135c:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <LoRa+0x16>
    1360:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <LoRa+0x17>
    1364:	a0 93 f5 02 	sts	0x02F5, r26	; 0x8002f5 <LoRa+0x18>
    1368:	b0 93 f6 02 	sts	0x02F6, r27	; 0x8002f6 <LoRa+0x19>
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
    136c:	48 e7       	ldi	r20, 0x78	; 120
    136e:	66 e8       	ldi	r22, 0x86	; 134
    1370:	8d ed       	ldi	r24, 0xDD	; 221
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	67 e8       	ldi	r22, 0x87	; 135
    137c:	8d ed       	ldi	r24, 0xDD	; 221
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	68 e8       	ldi	r22, 0x88	; 136
    1388:	8d ed       	ldi	r24, 0xDD	; 221
    138a:	92 e0       	ldi	r25, 0x02	; 2
    138c:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	6e e8       	ldi	r22, 0x8E	; 142
    1394:	8d ed       	ldi	r24, 0xDD	; 221
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	6f e8       	ldi	r22, 0x8F	; 143
    13a0:	8d ed       	ldi	r24, 0xDD	; 221
    13a2:	92 e0       	ldi	r25, 0x02	; 2
    13a4:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
begin():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:139
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);

  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
    13a8:	6c e0       	ldi	r22, 0x0C	; 12
    13aa:	8d ed       	ldi	r24, 0xDD	; 221
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
    13b2:	48 2f       	mov	r20, r24
    13b4:	43 60       	ori	r20, 0x03	; 3
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
    13b6:	6c e8       	ldi	r22, 0x8C	; 140
    13b8:	8d ed       	ldi	r24, 0xDD	; 221
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    13c0:	44 e0       	ldi	r20, 0x04	; 4
    13c2:	66 ea       	ldi	r22, 0xA6	; 166
    13c4:	8d ed       	ldi	r24, 0xDD	; 221
    13c6:	92 e0       	ldi	r25, 0x02	; 2
    13c8:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    13cc:	44 e8       	ldi	r20, 0x84	; 132
    13ce:	6d ec       	ldi	r22, 0xCD	; 205
    13d0:	8d ed       	ldi	r24, 0xDD	; 221
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    13d8:	4b e2       	ldi	r20, 0x2B	; 43
    13da:	6b e8       	ldi	r22, 0x8B	; 139
    13dc:	8d ed       	ldi	r24, 0xDD	; 221
    13de:	92 e0       	ldi	r25, 0x02	; 2
    13e0:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    13e4:	4f e8       	ldi	r20, 0x8F	; 143
    13e6:	69 e8       	ldi	r22, 0x89	; 137
    13e8:	8d ed       	ldi	r24, 0xDD	; 221
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    13f0:	41 e8       	ldi	r20, 0x81	; 129
    13f2:	61 e8       	ldi	r22, 0x81	; 129
    13f4:	8d ed       	ldi	r24, 0xDD	; 221
    13f6:	92 e0       	ldi	r25, 0x02	; 2
    13f8:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    13fc:	44 e8       	ldi	r20, 0x84	; 132
    13fe:	6d ec       	ldi	r22, 0xCD	; 205
    1400:	8d ed       	ldi	r24, 0xDD	; 221
    1402:	92 e0       	ldi	r25, 0x02	; 2
    1404:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    1408:	4b e2       	ldi	r20, 0x2B	; 43
    140a:	6b e8       	ldi	r22, 0x8B	; 139
    140c:	8d ed       	ldi	r24, 0xDD	; 221
    140e:	92 e0       	ldi	r25, 0x02	; 2
    1410:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    1414:	4a e8       	ldi	r20, 0x8A	; 138
    1416:	69 e8       	ldi	r22, 0x89	; 137
    1418:	8d ed       	ldi	r24, 0xDD	; 221
    141a:	92 e0       	ldi	r25, 0x02	; 2
    141c:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
millis():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    1420:	8f b7       	in	r24, 0x3f	; 63
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    1422:	f8 94       	cli
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    1424:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <timer0_millis>
    1428:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <timer0_millis+0x1>
    142c:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <timer0_millis+0x2>
    1430:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <timer0_millis+0x3>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    1434:	8f bf       	out	0x3f, r24	; 63
setupSIM800L():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:106
  //}
 
}

void setupSIM800L() {
  gsm.println("AT");
    1436:	61 e5       	ldi	r22, 0x51	; 81
    1438:	71 e0       	ldi	r23, 0x01	; 1
    143a:	82 ef       	ldi	r24, 0xF2	; 242
    143c:	93 e0       	ldi	r25, 0x03	; 3
    143e:	0e 94 11 04 	call	0x822	; 0x822 <Print::println(char const*)>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:107
  delay(1000);
    1442:	68 ee       	ldi	r22, 0xE8	; 232
    1444:	73 e0       	ldi	r23, 0x03	; 3
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 34 01 	call	0x268	; 0x268 <delay>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:108
  gsm.println("AT+CMGF=1");            // Tekst mod
    144e:	64 e5       	ldi	r22, 0x54	; 84
    1450:	71 e0       	ldi	r23, 0x01	; 1
    1452:	82 ef       	ldi	r24, 0xF2	; 242
    1454:	93 e0       	ldi	r25, 0x03	; 3
    1456:	0e 94 11 04 	call	0x822	; 0x822 <Print::println(char const*)>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:109
  delay(1000);
    145a:	68 ee       	ldi	r22, 0xE8	; 232
    145c:	73 e0       	ldi	r23, 0x03	; 3
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 34 01 	call	0x268	; 0x268 <delay>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:110
  gsm.println("AT+CNMI=2,2,0,0,0");    // Automatski prikaz novih SMS-ova
    1466:	6e e5       	ldi	r22, 0x5E	; 94
    1468:	71 e0       	ldi	r23, 0x01	; 1
    146a:	82 ef       	ldi	r24, 0xF2	; 242
    146c:	93 e0       	ldi	r25, 0x03	; 3
    146e:	0e 94 11 04 	call	0x822	; 0x822 <Print::println(char const*)>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:111
  delay(1000);
    1472:	68 ee       	ldi	r22, 0xE8	; 232
    1474:	73 e0       	ldi	r23, 0x03	; 3
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 34 01 	call	0x268	; 0x268 <delay>
serialEventRun():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	a8 2e       	mov	r10, r24
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	b8 2e       	mov	r11, r24
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:140
    Serial.println("Primljena poruka od: " + senderNumber);
  }
  else if (!buffer.startsWith("+CMT:") && !buffer.startsWith("OK")) {
    messageContent = buffer;
    //Serial.println("Tekst poruke: " + messageContent);
    newMessageReceived = true;
    1486:	77 24       	eor	r7, r7
    1488:	73 94       	inc	r7
readSIM800L():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:116
  delay(1000);
  //Serial.println("SIM800L spreman za prijem poruka");
}

void readSIM800L() {
  while (gsm.available()) {
    148a:	82 ef       	ldi	r24, 0xF2	; 242
    148c:	93 e0       	ldi	r25, 0x03	; 3
    148e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <SoftwareSerial::available()>
    1492:	89 2b       	or	r24, r25
    1494:	09 f4       	brne	.+2      	; 0x1498 <main+0x40e>
    1496:	bd c1       	rjmp	.+890    	; 0x1812 <main+0x788>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:117
    char c = gsm.read();
    1498:	82 ef       	ldi	r24, 0xF2	; 242
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	0e 94 00 03 	call	0x600	; 0x600 <SoftwareSerial::read()>
    14a0:	18 2f       	mov	r17, r24
concat():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:284
}

unsigned char String::concat(char c)
{
  char buf[2];
  buf[0] = c;
    14a2:	89 83       	std	Y+1, r24	; 0x01
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:285
  buf[1] = 0;
    14a4:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:286
  return concat(buf, 1);
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	be 01       	movw	r22, r28
    14ac:	6f 5f       	subi	r22, 0xFF	; 255
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	8c ee       	ldi	r24, 0xEC	; 236
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	0e 94 67 04 	call	0x8ce	; 0x8ce <String::concat(char const*, unsigned int)>
readSIM800L():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:120
    buffer += c;

    if (c == '\n') {
    14b8:	1a 30       	cpi	r17, 0x0A	; 10
    14ba:	39 f7       	brne	.-50     	; 0x148a <main+0x400>
trim():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:722
  }
}

void String::trim(void)
{
  if (!buffer || len == 0) return;
    14bc:	c0 90 ec 03 	lds	r12, 0x03EC	; 0x8003ec <buffer>
    14c0:	d0 90 ed 03 	lds	r13, 0x03ED	; 0x8003ed <buffer+0x1>
    14c4:	c1 14       	cp	r12, r1
    14c6:	d1 04       	cpc	r13, r1
    14c8:	49 f0       	breq	.+18     	; 0x14dc <main+0x452>
    14ca:	00 91 f0 03 	lds	r16, 0x03F0	; 0x8003f0 <buffer+0x4>
    14ce:	10 91 f1 03 	lds	r17, 0x03F1	; 0x8003f1 <buffer+0x5>
    14d2:	76 01       	movw	r14, r12
    14d4:	01 15       	cp	r16, r1
    14d6:	11 05       	cpc	r17, r1
    14d8:	09 f0       	breq	.+2      	; 0x14dc <main+0x452>
    14da:	ee c0       	rjmp	.+476    	; 0x16b8 <main+0x62e>
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:129
  }
}

void processBufferLine() {
  buffer.trim();
  if (buffer.length() == 0) return;
    14dc:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <buffer+0x4>
    14e0:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <buffer+0x5>
    14e4:	89 2b       	or	r24, r25
    14e6:	09 f4       	brne	.+2      	; 0x14ea <main+0x460>
    14e8:	ce c0       	rjmp	.+412    	; 0x1686 <main+0x5fc>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:131

  if (buffer.startsWith("+CMT:")) {
    14ea:	60 e7       	ldi	r22, 0x70	; 112
    14ec:	71 e0       	ldi	r23, 0x01	; 1
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
startsWith():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:492
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
  if (len < s2.len) return 0;
    14f6:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <buffer+0x4>
    14fa:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <buffer+0x5>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
main():
    1502:	10 e0       	ldi	r17, 0x00	; 0
startsWith():
    1504:	28 17       	cp	r18, r24
    1506:	39 07       	cpc	r19, r25
    1508:	28 f0       	brcs	.+10     	; 0x1514 <main+0x48a>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:493
  return startsWith(s2, 0);
    150a:	ce 01       	movw	r24, r28
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <String::startsWith(String const&, unsigned int) const [clone .constprop.49]>
    1512:	18 2f       	mov	r17, r24
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:131
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
    151c:	11 23       	and	r17, r17
    151e:	09 f4       	brne	.+2      	; 0x1522 <main+0x498>
    1520:	29 c1       	rjmp	.+594    	; 0x1774 <main+0x6ea>
indexOf():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:562
  return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if (fromIndex >= len) return -1;
    1522:	e0 90 f0 03 	lds	r14, 0x03F0	; 0x8003f0 <buffer+0x4>
    1526:	f0 90 f1 03 	lds	r15, 0x03F1	; 0x8003f1 <buffer+0x5>
    152a:	e1 14       	cp	r14, r1
    152c:	f1 04       	cpc	r15, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <main+0x4a8>
    1530:	ff c0       	rjmp	.+510    	; 0x1730 <main+0x6a6>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:563
  const char* temp = strchr(buffer + fromIndex, ch);
    1532:	00 91 ec 03 	lds	r16, 0x03EC	; 0x8003ec <buffer>
    1536:	10 91 ed 03 	lds	r17, 0x03ED	; 0x8003ed <buffer+0x1>
    153a:	62 e2       	ldi	r22, 0x22	; 34
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	c8 01       	movw	r24, r16
    1540:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strchr>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:564
  if (temp == NULL) return -1;
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	09 f4       	brne	.+2      	; 0x154a <main+0x4c0>
    1548:	f3 c0       	rjmp	.+486    	; 0x1730 <main+0x6a6>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:565
  return temp - buffer;
    154a:	9c 01       	movw	r18, r24
    154c:	20 1b       	sub	r18, r16
    154e:	31 0b       	sbc	r19, r17
    1550:	89 01       	movw	r16, r18
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:132
    int startQuote = buffer.indexOf('"') + 1;
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
indexOf():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:562
  return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if (fromIndex >= len) return -1;
    1556:	0e 15       	cp	r16, r14
    1558:	1f 05       	cpc	r17, r15
    155a:	08 f0       	brcs	.+2      	; 0x155e <main+0x4d4>
    155c:	ec c0       	rjmp	.+472    	; 0x1736 <main+0x6ac>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:563
  const char* temp = strchr(buffer + fromIndex, ch);
    155e:	e0 90 ec 03 	lds	r14, 0x03EC	; 0x8003ec <buffer>
    1562:	f0 90 ed 03 	lds	r15, 0x03ED	; 0x8003ed <buffer+0x1>
    1566:	62 e2       	ldi	r22, 0x22	; 34
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	c7 01       	movw	r24, r14
    156c:	80 0f       	add	r24, r16
    156e:	91 1f       	adc	r25, r17
    1570:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strchr>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:564
  if (temp == NULL) return -1;
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	09 f4       	brne	.+2      	; 0x157a <main+0x4f0>
    1578:	de c0       	rjmp	.+444    	; 0x1736 <main+0x6ac>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:565
  return temp - buffer;
    157a:	8e 19       	sub	r24, r14
    157c:	9f 09       	sbc	r25, r15
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:134
    int endQuote = buffer.indexOf('"', startQuote);
    senderNumber = buffer.substring(startQuote, endQuote);
    157e:	6c 01       	movw	r12, r24
substring():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:617
  return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
  if (left > right) {
    1580:	80 17       	cp	r24, r16
    1582:	91 07       	cpc	r25, r17
    1584:	10 f0       	brcs	.+4      	; 0x158a <main+0x500>
    1586:	68 01       	movw	r12, r16
    1588:	8c 01       	movw	r16, r24
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:622
    unsigned int temp = right;
    right = left;
    left = temp;
  }
  String out;
    158a:	62 e4       	ldi	r22, 0x42	; 66
    158c:	71 e0       	ldi	r23, 0x01	; 1
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:623
  if (left >= len) return out;
    1596:	e0 90 f0 03 	lds	r14, 0x03F0	; 0x8003f0 <buffer+0x4>
    159a:	f0 90 f1 03 	lds	r15, 0x03F1	; 0x8003f1 <buffer+0x5>
    159e:	ce 14       	cp	r12, r14
    15a0:	df 04       	cpc	r13, r15
    15a2:	10 f5       	brcc	.+68     	; 0x15e8 <main+0x55e>
    15a4:	0e 15       	cp	r16, r14
    15a6:	1f 05       	cpc	r17, r15
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <main+0x522>
    15aa:	78 01       	movw	r14, r16
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:625
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
    15ac:	e0 91 ec 03 	lds	r30, 0x03EC	; 0x8003ec <buffer>
    15b0:	f0 91 ed 03 	lds	r31, 0x03ED	; 0x8003ed <buffer+0x1>
    15b4:	ee 0d       	add	r30, r14
    15b6:	ff 1d       	adc	r31, r15
    15b8:	10 81       	ld	r17, Z
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:626
  buffer[right] = '\0'; 
    15ba:	10 82       	st	Z, r1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:627
  out = buffer + left;  // pointer arithmetic
    15bc:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <buffer>
    15c0:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <buffer+0x1>
    15c4:	6c 0d       	add	r22, r12
    15c6:	7d 1d       	adc	r23, r13
operator=():
    15c8:	ce 01       	movw	r24, r28
    15ca:	01 96       	adiw	r24, 0x01	; 1
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    15cc:	61 15       	cp	r22, r1
    15ce:	71 05       	cpc	r23, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <main+0x54a>
    15d2:	b4 c0       	rjmp	.+360    	; 0x173c <main+0x6b2>
    15d4:	0e 94 b4 04 	call	0x968	; 0x968 <String::operator=(char const*) [clone .part.3]>
substring():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:628
  if (left >= len) return out;
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
  buffer[right] = '\0'; 
  out = buffer + left;  // pointer arithmetic
  buffer[right] = temp;  //restore character
    15d8:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <buffer>
    15dc:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <buffer+0x1>
    15e0:	e8 0e       	add	r14, r24
    15e2:	f9 1e       	adc	r15, r25
    15e4:	f7 01       	movw	r30, r14
    15e6:	10 83       	st	Z, r17
move():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:196
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
  if (buffer) {
    15e8:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <senderNumber>
    15ec:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <senderNumber+0x1>
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <main+0x56c>
    15f4:	a8 c0       	rjmp	.+336    	; 0x1746 <main+0x6bc>
    15f6:	69 81       	ldd	r22, Y+1	; 0x01
    15f8:	7a 81       	ldd	r23, Y+2	; 0x02
_ZNK6StringcvMS_KFvvEEv.isra.0():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    15fa:	61 15       	cp	r22, r1
    15fc:	71 05       	cpc	r23, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <main+0x578>
    1600:	a0 c0       	rjmp	.+320    	; 0x1742 <main+0x6b8>
move():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
    1602:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <senderNumber+0x2>
    1606:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <senderNumber+0x3>
    160a:	2d 81       	ldd	r18, Y+5	; 0x05
    160c:	3e 81       	ldd	r19, Y+6	; 0x06
    160e:	42 17       	cp	r20, r18
    1610:	53 07       	cpc	r21, r19
    1612:	08 f4       	brcc	.+2      	; 0x1616 <main+0x58c>
    1614:	96 c0       	rjmp	.+300    	; 0x1742 <main+0x6b8>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
    1616:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcpy>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <senderNumber+0x5>
    1622:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <senderNumber+0x4>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
    1626:	1e 82       	std	Y+6, r1	; 0x06
    1628:	1d 82       	std	Y+5, r1	; 0x05
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:134
    162a:	ce 01       	movw	r24, r28
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
_ZN15StringSumHelperC2EPKc():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    1632:	66 e7       	ldi	r22, 0x76	; 118
    1634:	71 e0       	ldi	r23, 0x01	; 1
    1636:	ce 01       	movw	r24, r28
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
operator+():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:357
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    163e:	40 91 e4 03 	lds	r20, 0x03E4	; 0x8003e4 <senderNumber+0x4>
    1642:	50 91 e5 03 	lds	r21, 0x03E5	; 0x8003e5 <senderNumber+0x5>
    1646:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <senderNumber>
    164a:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <senderNumber+0x1>
    164e:	ce 01       	movw	r24, r28
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	0e 94 67 04 	call	0x8ce	; 0x8ce <String::concat(char const*, unsigned int)>
    1656:	81 11       	cpse	r24, r1
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <main+0x5d8>
    165a:	ce 01       	movw	r24, r28
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	0e 94 25 04 	call	0x84a	; 0x84a <String::invalidate()>
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1662:	4d 81       	ldd	r20, Y+5	; 0x05
    1664:	5e 81       	ldd	r21, Y+6	; 0x06
    1666:	69 81       	ldd	r22, Y+1	; 0x01
    1668:	7a 81       	ldd	r23, Y+2	; 0x02
    166a:	8f e3       	ldi	r24, 0x3F	; 63
    166c:	92 e0       	ldi	r25, 0x02	; 2
    166e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Print::write(unsigned char const*, unsigned int)>
    1672:	60 e4       	ldi	r22, 0x40	; 64
    1674:	71 e0       	ldi	r23, 0x01	; 1
    1676:	8f e3       	ldi	r24, 0x3F	; 63
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	0e 94 02 04 	call	0x804	; 0x804 <Print::write(char const*) [clone .part.2]>
_ZN15StringSumHelperD2Ev():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
operator=():
    1686:	62 e4       	ldi	r22, 0x42	; 66
    1688:	71 e0       	ldi	r23, 0x01	; 1
    168a:	8c ee       	ldi	r24, 0xEC	; 236
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	0e 94 b4 04 	call	0x968	; 0x968 <String::operator=(char const*) [clone .part.3]>
    1692:	fb ce       	rjmp	.-522    	; 0x148a <main+0x400>
main():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1694:	2b e6       	ldi	r18, 0x6B	; 107
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	9d cd       	rjmp	.-1222   	; 0x11d4 <main+0x14a>
begin():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    169a:	8e 30       	cpi	r24, 0x0E	; 14
    169c:	14 f4       	brge	.+4      	; 0x16a2 <main+0x618>
    169e:	88 50       	subi	r24, 0x08	; 8
    16a0:	a0 cd       	rjmp	.-1216   	; 0x11e2 <main+0x158>
    16a2:	86 31       	cpi	r24, 0x16	; 22
    16a4:	14 f4       	brge	.+4      	; 0x16aa <main+0x620>
    16a6:	8e 50       	subi	r24, 0x0E	; 14
    16a8:	9c cd       	rjmp	.-1224   	; 0x11e2 <main+0x158>
    16aa:	86 31       	cpi	r24, 0x16	; 22
    16ac:	11 f0       	breq	.+4      	; 0x16b2 <main+0x628>
main():
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	9e cd       	rjmp	.-1220   	; 0x11ee <main+0x164>
    16b2:	80 e4       	ldi	r24, 0x40	; 64
    16b4:	9c cd       	rjmp	.-1224   	; 0x11ee <main+0x164>
trim():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:724

void String::trim(void)
{
  if (!buffer || len == 0) return;
  char *begin = buffer;
  while (isspace(*begin)) begin++;
    16b6:	74 01       	movw	r14, r8
    16b8:	47 01       	movw	r8, r14
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	88 1a       	sub	r8, r24
    16be:	98 0a       	sbc	r9, r24
    16c0:	f7 01       	movw	r30, r14
    16c2:	80 81       	ld	r24, Z
    16c4:	08 2e       	mov	r0, r24
    16c6:	00 0c       	add	r0, r0
    16c8:	99 0b       	sbc	r25, r25
    16ca:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <isspace>
    16ce:	89 2b       	or	r24, r25
    16d0:	91 f7       	brne	.-28     	; 0x16b6 <main+0x62c>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:725
  char *end = buffer + len - 1;
    16d2:	01 50       	subi	r16, 0x01	; 1
    16d4:	11 09       	sbc	r17, r1
    16d6:	0c 0d       	add	r16, r12
    16d8:	1d 1d       	adc	r17, r13
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:726
  while (isspace(*end) && end >= begin) end--;
    16da:	f8 01       	movw	r30, r16
    16dc:	80 81       	ld	r24, Z
    16de:	08 2e       	mov	r0, r24
    16e0:	00 0c       	add	r0, r0
    16e2:	99 0b       	sbc	r25, r25
    16e4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <isspace>
    16e8:	89 2b       	or	r24, r25
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <main+0x66e>
    16ec:	0e 15       	cp	r16, r14
    16ee:	1f 05       	cpc	r17, r15
    16f0:	18 f0       	brcs	.+6      	; 0x16f8 <main+0x66e>
    16f2:	01 50       	subi	r16, 0x01	; 1
    16f4:	11 09       	sbc	r17, r1
    16f6:	f1 cf       	rjmp	.-30     	; 0x16da <main+0x650>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:727
  len = end + 1 - begin;
    16f8:	a8 01       	movw	r20, r16
    16fa:	4f 5f       	subi	r20, 0xFF	; 255
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255
    16fe:	4e 19       	sub	r20, r14
    1700:	5f 09       	sbc	r21, r15
    1702:	50 93 f1 03 	sts	0x03F1, r21	; 0x8003f1 <buffer+0x5>
    1706:	40 93 f0 03 	sts	0x03F0, r20	; 0x8003f0 <buffer+0x4>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:728
  if (begin > buffer) memcpy(buffer, begin, len);
    170a:	ce 14       	cp	r12, r14
    170c:	df 04       	cpc	r13, r15
    170e:	20 f4       	brcc	.+8      	; 0x1718 <main+0x68e>
    1710:	b7 01       	movw	r22, r14
    1712:	c6 01       	movw	r24, r12
    1714:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <memcpy>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:729
  buffer[len] = 0;
    1718:	e0 91 ec 03 	lds	r30, 0x03EC	; 0x8003ec <buffer>
    171c:	f0 91 ed 03 	lds	r31, 0x03ED	; 0x8003ed <buffer+0x1>
    1720:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <buffer+0x4>
    1724:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <buffer+0x5>
    1728:	e8 0f       	add	r30, r24
    172a:	f9 1f       	adc	r31, r25
    172c:	10 82       	st	Z, r1
    172e:	d6 ce       	rjmp	.-596    	; 0x14dc <main+0x452>
main():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:562
  return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if (fromIndex >= len) return -1;
    1730:	0f ef       	ldi	r16, 0xFF	; 255
    1732:	1f ef       	ldi	r17, 0xFF	; 255
    1734:	0e cf       	rjmp	.-484    	; 0x1552 <main+0x4c8>
    1736:	8f ef       	ldi	r24, 0xFF	; 255
    1738:	9f ef       	ldi	r25, 0xFF	; 255
    173a:	21 cf       	rjmp	.-446    	; 0x157e <main+0x4f4>
operator=():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:242
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
    173c:	0e 94 25 04 	call	0x84a	; 0x84a <String::invalidate()>
    1740:	4b cf       	rjmp	.-362    	; 0x15d8 <main+0x54e>
move():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
    1742:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <free>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <senderNumber+0x1>
    174e:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <senderNumber>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <senderNumber+0x3>
    175a:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <senderNumber+0x2>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <senderNumber+0x5>
    1766:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <senderNumber+0x4>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
    176a:	1a 82       	std	Y+2, r1	; 0x02
    176c:	19 82       	std	Y+1, r1	; 0x01
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
    176e:	1c 82       	std	Y+4, r1	; 0x04
    1770:	1b 82       	std	Y+3, r1	; 0x03
    1772:	59 cf       	rjmp	.-334    	; 0x1626 <main+0x59c>
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:137
    Serial.println("Primljena poruka od: " + senderNumber);
  }
  else if (!buffer.startsWith("+CMT:") && !buffer.startsWith("OK")) {
    1774:	60 e7       	ldi	r22, 0x70	; 112
    1776:	71 e0       	ldi	r23, 0x01	; 1
    1778:	ce 01       	movw	r24, r28
    177a:	07 96       	adiw	r24, 0x07	; 7
    177c:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
startsWith():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:492
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
  if (len < s2.len) return 0;
    1780:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <buffer+0x4>
    1784:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <buffer+0x5>
    1788:	8b 85       	ldd	r24, Y+11	; 0x0b
    178a:	9c 85       	ldd	r25, Y+12	; 0x0c
    178c:	28 17       	cp	r18, r24
    178e:	39 07       	cpc	r19, r25
    1790:	38 f0       	brcs	.+14     	; 0x17a0 <main+0x716>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:493
  return startsWith(s2, 0);
    1792:	ce 01       	movw	r24, r28
    1794:	07 96       	adiw	r24, 0x07	; 7
    1796:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <String::startsWith(String const&, unsigned int) const [clone .constprop.49]>
main():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:137
    179a:	10 e0       	ldi	r17, 0x00	; 0
processBufferLine():
    179c:	81 11       	cpse	r24, r1
    179e:	1b c0       	rjmp	.+54     	; 0x17d6 <main+0x74c>
    17a0:	6c e8       	ldi	r22, 0x8C	; 140
    17a2:	71 e0       	ldi	r23, 0x01	; 1
    17a4:	ce 01       	movw	r24, r28
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
startsWith():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:492
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
  if (len < s2.len) return 0;
    17ac:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <buffer+0x4>
    17b0:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <buffer+0x5>
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
main():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:137
    17b8:	11 e0       	ldi	r17, 0x01	; 1
startsWith():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:492
    17ba:	28 17       	cp	r18, r24
    17bc:	39 07       	cpc	r19, r25
    17be:	38 f0       	brcs	.+14     	; 0x17ce <main+0x744>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:493
  return startsWith(s2, 0);
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <String::startsWith(String const&, unsigned int) const [clone .constprop.49]>
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:137
    17c8:	11 e0       	ldi	r17, 0x01	; 1
    17ca:	81 11       	cpse	r24, r1
    17cc:	10 e0       	ldi	r17, 0x00	; 0
    17ce:	ce 01       	movw	r24, r28
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
    17d6:	ce 01       	movw	r24, r28
    17d8:	07 96       	adiw	r24, 0x07	; 7
    17da:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
    17de:	11 23       	and	r17, r17
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <main+0x75a>
    17e2:	51 cf       	rjmp	.-350    	; 0x1686 <main+0x5fc>
operator=():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:219

String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
    17e4:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <buffer>
    17e8:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <buffer+0x1>
    17ec:	61 15       	cp	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	59 f0       	breq	.+22     	; 0x1808 <main+0x77e>
    17f2:	40 91 f0 03 	lds	r20, 0x03F0	; 0x8003f0 <buffer+0x4>
    17f6:	50 91 f1 03 	lds	r21, 0x03F1	; 0x8003f1 <buffer+0x5>
    17fa:	8a ed       	ldi	r24, 0xDA	; 218
    17fc:	93 e0       	ldi	r25, 0x03	; 3
    17fe:	0e 94 93 04 	call	0x926	; 0x926 <String::copy(char const*, unsigned int)>
processBufferLine():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:140
    messageContent = buffer;
    //Serial.println("Tekst poruke: " + messageContent);
    newMessageReceived = true;
    1802:	70 92 35 02 	sts	0x0235, r7	; 0x800235 <newMessageReceived>
    1806:	3f cf       	rjmp	.-386    	; 0x1686 <main+0x5fc>
operator=():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:220
  else invalidate();
    1808:	8a ed       	ldi	r24, 0xDA	; 218
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	0e 94 25 04 	call	0x84a	; 0x84a <String::invalidate()>
    1810:	f8 cf       	rjmp	.-16     	; 0x1802 <main+0x778>
loop():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:53
void loop()
{
readSIM800L();

  // Ako je stigla nova poruka
  if (newMessageReceived) {
    1812:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <newMessageReceived>
    1816:	88 23       	and	r24, r24
    1818:	09 f4       	brne	.+2      	; 0x181c <main+0x792>
    181a:	b9 c0       	rjmp	.+370    	; 0x198e <main+0x904>
equals():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:447
  return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
  return (len == s2.len && compareTo(s2) == 0);
    181c:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <senderNumber+0x4>
    1820:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <senderNumber+0x5>
    1824:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <allowedNumber+0x4>
    1828:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <allowedNumber+0x5>
    182c:	28 17       	cp	r18, r24
    182e:	39 07       	cpc	r19, r25
    1830:	b1 f4       	brne	.+44     	; 0x185e <main+0x7d4>
compareTo():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:437
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
  if (!buffer || !s.buffer) {
    1832:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <senderNumber>
    1836:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <senderNumber+0x1>
    183a:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <allowedNumber>
    183e:	70 91 e7 03 	lds	r23, 0x03E7	; 0x8003e7 <allowedNumber+0x1>
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	99 f0       	breq	.+38     	; 0x186c <main+0x7e2>
    1846:	61 15       	cp	r22, r1
    1848:	71 05       	cpc	r23, r1
    184a:	31 f4       	brne	.+12     	; 0x1858 <main+0x7ce>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:439
    if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    if (buffer && len > 0) return *(unsigned char *)buffer;
    184c:	23 2b       	or	r18, r19
    184e:	d9 f0       	breq	.+54     	; 0x1886 <main+0x7fc>
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	15 c0       	rjmp	.+42     	; 0x1882 <main+0x7f8>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:442
    return 0;
  }
  return strcmp(buffer, s.buffer);
    1858:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <strcmp>
    185c:	12 c0       	rjmp	.+36     	; 0x1882 <main+0x7f8>
loop():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:57
    if (senderNumber == allowedNumber) {
      sendAutoReply(senderNumber, "45.234228,19.73486");
    } else {
      Serial.println("Poruka nije od dozvoljenog broja, ne odgovaram.");
    185e:	6c ea       	ldi	r22, 0xAC	; 172
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	8f e3       	ldi	r24, 0x3F	; 63
    1864:	92 e0       	ldi	r25, 0x02	; 2
    1866:	0e 94 11 04 	call	0x822	; 0x822 <Print::println(char const*)>
    186a:	83 c0       	rjmp	.+262    	; 0x1972 <main+0x8e8>
compareTo():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:438
/*********************************************/

int String::compareTo(const String &s) const
{
  if (!buffer || !s.buffer) {
    if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    186c:	61 15       	cp	r22, r1
    186e:	71 05       	cpc	r23, r1
    1870:	51 f0       	breq	.+20     	; 0x1886 <main+0x7fc>
    1872:	23 2b       	or	r18, r19
    1874:	41 f0       	breq	.+16     	; 0x1886 <main+0x7fc>
    1876:	fb 01       	movw	r30, r22
    1878:	80 81       	ld	r24, Z
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	91 95       	neg	r25
    187e:	81 95       	neg	r24
    1880:	91 09       	sbc	r25, r1
equals():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:447
  return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
  return (len == s2.len && compareTo(s2) == 0);
    1882:	89 2b       	or	r24, r25
    1884:	61 f7       	brne	.-40     	; 0x185e <main+0x7d4>
loop():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:55
readSIM800L();

  // Ako je stigla nova poruka
  if (newMessageReceived) {
    if (senderNumber == allowedNumber) {
      sendAutoReply(senderNumber, "45.234228,19.73486");
    1886:	6f e8       	ldi	r22, 0x8F	; 143
    1888:	71 e0       	ldi	r23, 0x01	; 1
    188a:	ce 01       	movw	r24, r28
    188c:	07 96       	adiw	r24, 0x07	; 7
    188e:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
_ZN6String4initEv():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    1892:	1e 86       	std	Y+14, r1	; 0x0e
    1894:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    1896:	18 8a       	std	Y+16, r1	; 0x10
    1898:	1f 86       	std	Y+15, r1	; 0x0f
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
    189a:	1a 8a       	std	Y+18, r1	; 0x12
    189c:	19 8a       	std	Y+17, r1	; 0x11
operator=():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:219

String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
    189e:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <senderNumber>
    18a2:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <senderNumber+0x1>
    18a6:	61 15       	cp	r22, r1
    18a8:	71 05       	cpc	r23, r1
    18aa:	41 f0       	breq	.+16     	; 0x18bc <main+0x832>
    18ac:	40 91 e4 03 	lds	r20, 0x03E4	; 0x8003e4 <senderNumber+0x4>
    18b0:	50 91 e5 03 	lds	r21, 0x03E5	; 0x8003e5 <senderNumber+0x5>
    18b4:	ce 01       	movw	r24, r28
    18b6:	0d 96       	adiw	r24, 0x0d	; 13
    18b8:	0e 94 93 04 	call	0x926	; 0x926 <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperC2EPKc():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:217
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    18bc:	62 ea       	ldi	r22, 0xA2	; 162
    18be:	71 e0       	ldi	r23, 0x01	; 1
    18c0:	ce 01       	movw	r24, r28
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	0e 94 be 04 	call	0x97c	; 0x97c <String::String(char const*)>
operator+():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:357
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    18c8:	49 89       	ldd	r20, Y+17	; 0x11
    18ca:	5a 89       	ldd	r21, Y+18	; 0x12
    18cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    18ce:	7e 85       	ldd	r23, Y+14	; 0x0e
    18d0:	ce 01       	movw	r24, r28
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	0e 94 67 04 	call	0x8ce	; 0x8ce <String::concat(char const*, unsigned int)>
    18d8:	81 11       	cpse	r24, r1
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <main+0x85a>
    18dc:	ce 01       	movw	r24, r28
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	0e 94 25 04 	call	0x84a	; 0x84a <String::invalidate()>
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.cpp:364
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	6a ea       	ldi	r22, 0xAA	; 170
    18ea:	71 e0       	ldi	r23, 0x01	; 1
    18ec:	ce 01       	movw	r24, r28
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	0e 94 67 04 	call	0x8ce	; 0x8ce <String::concat(char const*, unsigned int)>
    18f4:	81 11       	cpse	r24, r1
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <main+0x876>
    18f8:	ce 01       	movw	r24, r28
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	0e 94 25 04 	call	0x84a	; 0x84a <String::invalidate()>
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:58
    1900:	4d 81       	ldd	r20, Y+5	; 0x05
    1902:	5e 81       	ldd	r21, Y+6	; 0x06
    1904:	69 81       	ldd	r22, Y+1	; 0x01
    1906:	7a 81       	ldd	r23, Y+2	; 0x02
    1908:	82 ef       	ldi	r24, 0xF2	; 242
    190a:	93 e0       	ldi	r25, 0x03	; 3
    190c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Print::write(unsigned char const*, unsigned int)>
    1910:	60 e4       	ldi	r22, 0x40	; 64
    1912:	71 e0       	ldi	r23, 0x01	; 1
    1914:	82 ef       	ldi	r24, 0xF2	; 242
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	0e 94 02 04 	call	0x804	; 0x804 <Print::write(char const*) [clone .part.2]>
_ZN15StringSumHelperD2Ev():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    191c:	ce 01       	movw	r24, r28
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
sendAutoReply():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:148

void sendAutoReply(String phoneNumber, String message) {
 // Serial.println("Šaljem odgovor \"" + message + "\" na: " + phoneNumber);

  gsm.println("AT+CMGS=\"" + phoneNumber + "\"");
  delay(2000);
    1924:	60 ed       	ldi	r22, 0xD0	; 208
    1926:	77 e0       	ldi	r23, 0x07	; 7
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 34 01 	call	0x268	; 0x268 <delay>
write():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:58
    1930:	4b 85       	ldd	r20, Y+11	; 0x0b
    1932:	5c 85       	ldd	r21, Y+12	; 0x0c
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	82 ef       	ldi	r24, 0xF2	; 242
    193a:	93 e0       	ldi	r25, 0x03	; 3
    193c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Print::write(unsigned char const*, unsigned int)>
sendAutoReply():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:151

  gsm.print(message);
  delay(500);
    1940:	64 ef       	ldi	r22, 0xF4	; 244
    1942:	71 e0       	ldi	r23, 0x01	; 1
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 34 01 	call	0x268	; 0x268 <delay>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:153

  gsm.write(26); // Ctrl+Z
    194c:	6a e1       	ldi	r22, 0x1A	; 26
    194e:	82 ef       	ldi	r24, 0xF2	; 242
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	0e 94 8e 02 	call	0x51c	; 0x51c <SoftwareSerial::write(unsigned char)>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:154
  delay(5000);
    1956:	68 e8       	ldi	r22, 0x88	; 136
    1958:	73 e1       	ldi	r23, 0x13	; 19
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 34 01 	call	0x268	; 0x268 <delay>
loop():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:55
readSIM800L();

  // Ako je stigla nova poruka
  if (newMessageReceived) {
    if (senderNumber == allowedNumber) {
      sendAutoReply(senderNumber, "45.234228,19.73486");
    1962:	ce 01       	movw	r24, r28
    1964:	0d 96       	adiw	r24, 0x0d	; 13
    1966:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
    196a:	ce 01       	movw	r24, r28
    196c:	07 96       	adiw	r24, 0x07	; 7
    196e:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:61
    } else {
      Serial.println("Poruka nije od dozvoljenog broja, ne odgovaram.");
    }

    // Resetuj
    newMessageReceived = false;
    1972:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <newMessageReceived>
operator=():
    1976:	62 e4       	ldi	r22, 0x42	; 66
    1978:	71 e0       	ldi	r23, 0x01	; 1
    197a:	80 ee       	ldi	r24, 0xE0	; 224
    197c:	93 e0       	ldi	r25, 0x03	; 3
    197e:	0e 94 b4 04 	call	0x968	; 0x968 <String::operator=(char const*) [clone .part.3]>
    1982:	62 e4       	ldi	r22, 0x42	; 66
    1984:	71 e0       	ldi	r23, 0x01	; 1
    1986:	8a ed       	ldi	r24, 0xDA	; 218
    1988:	93 e0       	ldi	r25, 0x03	; 3
    198a:	0e 94 b4 04 	call	0x968	; 0x968 <String::operator=(char const*) [clone .part.3]>
loop():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:66
    senderNumber = "";
    messageContent = "";
  }

  delay(1000);
    198e:	68 ee       	ldi	r22, 0xE8	; 232
    1990:	73 e0       	ldi	r23, 0x03	; 3
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 34 01 	call	0x268	; 0x268 <delay>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:87
        {
            digitalWrite(LoRaConfig.HighPowerAmpEna, ON);
            delay(1000);
        }*/

        delay(500);
    199a:	64 ef       	ldi	r22, 0xF4	; 244
    199c:	71 e0       	ldi	r23, 0x01	; 1
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 34 01 	call	0x268	; 0x268 <delay>
isTransmitting():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:207
  return 1;
}

bool LoRaClass::isTransmitting()
{
  if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) {
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	8d ed       	ldi	r24, 0xDD	; 221
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
    19b0:	83 70       	andi	r24, 0x03	; 3
    19b2:	83 30       	cpi	r24, 0x03	; 3
    19b4:	79 f1       	breq	.+94     	; 0x1a14 <main+0x98a>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:211
    return true;
  }

  if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
    19b6:	62 e1       	ldi	r22, 0x12	; 18
    19b8:	8d ed       	ldi	r24, 0xDD	; 221
    19ba:	92 e0       	ldi	r25, 0x02	; 2
    19bc:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
    19c0:	83 ff       	sbrs	r24, 3
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <main+0x946>
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
    19c4:	48 e0       	ldi	r20, 0x08	; 8
    19c6:	62 e9       	ldi	r22, 0x92	; 146
    19c8:	8d ed       	ldi	r24, 0xDD	; 221
    19ca:	92 e0       	ldi	r25, 0x02	; 2
    19cc:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    19d0:	41 e8       	ldi	r20, 0x81	; 129
    19d2:	61 e8       	ldi	r22, 0x81	; 129
    19d4:	8d ed       	ldi	r24, 0xDD	; 221
    19d6:	92 e0       	ldi	r25, 0x02	; 2
    19d8:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
explicitHeaderMode():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:680
  }
}

void LoRaClass::explicitHeaderMode()
{
  _implicitHeaderMode = 0;
    19dc:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <LoRa+0x1d>
    19e0:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <LoRa+0x1c>
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:682

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
    19e4:	6d e1       	ldi	r22, 0x1D	; 29
    19e6:	8d ed       	ldi	r24, 0xDD	; 221
    19e8:	92 e0       	ldi	r25, 0x02	; 2
    19ea:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
    19ee:	48 2f       	mov	r20, r24
    19f0:	4e 7f       	andi	r20, 0xFE	; 254
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
    19f2:	6d e9       	ldi	r22, 0x9D	; 157
    19f4:	8d ed       	ldi	r24, 0xDD	; 221
    19f6:	92 e0       	ldi	r25, 0x02	; 2
    19f8:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	6d e8       	ldi	r22, 0x8D	; 141
    1a00:	8d ed       	ldi	r24, 0xDD	; 221
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	62 ea       	ldi	r22, 0xA2	; 162
    1a0c:	8d ed       	ldi	r24, 0xDD	; 221
    1a0e:	92 e0       	ldi	r25, 0x02	; 2
    1a10:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
write():
    1a14:	6c ed       	ldi	r22, 0xDC	; 220
    1a16:	71 e0       	ldi	r23, 0x01	; 1
    1a18:	8d ed       	ldi	r24, 0xDD	; 221
    1a1a:	92 e0       	ldi	r25, 0x02	; 2
    1a1c:	0e 94 02 04 	call	0x804	; 0x804 <Print::write(char const*) [clone .part.2]>
writeRegister():
    1a20:	43 e8       	ldi	r20, 0x83	; 131
    1a22:	61 e8       	ldi	r22, 0x81	; 129
    1a24:	8d ed       	ldi	r24, 0xDD	; 221
    1a26:	92 e0       	ldi	r25, 0x02	; 2
    1a28:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
endPacket():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:195
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);

  if (!async) {
    // wait for TX done
    while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
    1a2c:	62 e1       	ldi	r22, 0x12	; 18
    1a2e:	8d ed       	ldi	r24, 0xDD	; 221
    1a30:	92 e0       	ldi	r25, 0x02	; 2
    1a32:	0e 94 46 03 	call	0x68c	; 0x68c <LoRaClass::readRegister(unsigned char)>
    1a36:	83 ff       	sbrs	r24, 3
    1a38:	f9 cf       	rjmp	.-14     	; 0x1a2c <main+0x9a2>
writeRegister():
c:\Users\urosm\Documents\Arduino\libraries\LoRa\src/LoRa.cpp:730
  return singleTransfer(address & 0x7f, 0x00);
}

void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
  singleTransfer(address | 0x80, value);
    1a3a:	48 e0       	ldi	r20, 0x08	; 8
    1a3c:	62 e9       	ldi	r22, 0x92	; 146
    1a3e:	8d ed       	ldi	r24, 0xDD	; 221
    1a40:	92 e0       	ldi	r25, 0x02	; 2
    1a42:	0e 94 21 03 	call	0x642	; 0x642 <LoRaClass::singleTransfer(unsigned char, unsigned char)>
serialEventRun():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    1a46:	a1 14       	cp	r10, r1
    1a48:	b1 04       	cpc	r11, r1
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <main+0x9c4>
    1a4c:	1e cd       	rjmp	.-1476   	; 0x148a <main+0x400>
    1a4e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Serial0_available()>
    1a52:	88 23       	and	r24, r24
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <main+0x9ce>
    1a56:	17 cd       	rjmp	.-1490   	; 0x1486 <main+0x3fc>
    1a58:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a5c:	14 cd       	rjmp	.-1496   	; 0x1486 <main+0x3fc>

00001a5e <_GLOBAL__sub_D_gsm>:
__static_initialization_and_destruction_0():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:11
SoftwareSerial gsm(2, 3);

String buffer = "";
String allowedNumber = "+381628775688";  // Dozvoljeni broj
String senderNumber = "";
String messageContent = "";
    1a5e:	8a ed       	ldi	r24, 0xDA	; 218
    1a60:	93 e0       	ldi	r25, 0x03	; 3
    1a62:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:10

SoftwareSerial gsm(2, 3);

String buffer = "";
String allowedNumber = "+381628775688";  // Dozvoljeni broj
String senderNumber = "";
    1a66:	80 ee       	ldi	r24, 0xE0	; 224
    1a68:	93 e0       	ldi	r25, 0x03	; 3
    1a6a:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:9
#include <SoftwareSerial.h>

SoftwareSerial gsm(2, 3);

String buffer = "";
String allowedNumber = "+381628775688";  // Dozvoljeni broj
    1a6e:	86 ee       	ldi	r24, 0xE6	; 230
    1a70:	93 e0       	ldi	r25, 0x03	; 3
    1a72:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:8
#include "LoRa_Main.h"
#include <SoftwareSerial.h>

SoftwareSerial gsm(2, 3);

String buffer = "";
    1a76:	8c ee       	ldi	r24, 0xEC	; 236
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	0e 94 37 04 	call	0x86e	; 0x86e <String::~String()>
__base_dtor ():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    1a7e:	82 e3       	ldi	r24, 0x32	; 50
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <gsm+0x1>
    1a86:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <gsm>
stopListening():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    1a8a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <SoftwareSerial::active_object>
    1a8e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <SoftwareSerial::active_object+0x1>
    1a92:	82 5f       	subi	r24, 0xF2	; 242
    1a94:	93 40       	sbci	r25, 0x03	; 3
    1a96:	71 f4       	brne	.+28     	; 0x1ab4 <_GLOBAL__sub_D_gsm+0x56>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1a98:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <gsm+0x13>
    1a9c:	f0 91 06 04 	lds	r31, 0x0406	; 0x800406 <gsm+0x14>
    1aa0:	90 81       	ld	r25, Z
    1aa2:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gsm+0x15>
    1aa6:	80 95       	com	r24
    1aa8:	89 23       	and	r24, r25
    1aaa:	80 83       	st	Z, r24
stopListening():
C:\Users\urosm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    1aac:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <SoftwareSerial::active_object+0x1>
    1ab0:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <SoftwareSerial::active_object>
_GLOBAL__sub_D_gsm():
C:\Users\urosm\Documents\Arduino\Predajna_strana_v3/Predajna_strana_v3.ino:157

  gsm.write(26); // Ctrl+Z
  delay(5000);

 // Serial.println("Poruka poslata!\n");
    1ab4:	08 95       	ret

00001ab6 <isspace>:
isspace():
    1ab6:	91 11       	cpse	r25, r1
    1ab8:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__ctype_isfalse>
    1abc:	80 32       	cpi	r24, 0x20	; 32
    1abe:	19 f0       	breq	.+6      	; 0x1ac6 <isspace+0x10>
    1ac0:	89 50       	subi	r24, 0x09	; 9
    1ac2:	85 50       	subi	r24, 0x05	; 5
    1ac4:	c8 f7       	brcc	.-14     	; 0x1ab8 <isspace+0x2>
    1ac6:	08 95       	ret

00001ac8 <__ctype_isfalse>:
__ctype_isfalse():
    1ac8:	99 27       	eor	r25, r25
    1aca:	88 27       	eor	r24, r24

00001acc <__ctype_istrue>:
__ctype_istrue():
    1acc:	08 95       	ret

00001ace <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1ace:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1ad0:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1ad2:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1ad4:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1ad6:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    1ad8:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    1ada:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1adc:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1ade:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1ae0:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1ae2:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1ae4:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1ae6:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1ae8:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1aea:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1aec:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1aee:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1af0:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    1af2:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    1af4:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    1af6:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    1af8:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    1afa:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    1afc:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1afe:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1b00:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    1b02:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1b04:	09 94       	ijmp

00001b06 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1b06:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1b08:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1b0a:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1b0c:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1b0e:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1b10:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1b12:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1b14:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1b16:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1b18:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1b1a:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1b1c:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1b1e:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1b20:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1b22:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1b24:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1b26:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    1b28:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1b2a:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1b2c:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1b2e:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1b30:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1b32:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1b34:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1b36:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    1b38:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1b3a:	08 95       	ret

00001b3c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1b3c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1b3e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1b40:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1b42:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1b44:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1b46:	09 94       	ijmp

00001b48 <malloc>:
malloc():
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	91 05       	cpc	r25, r1
    1b54:	10 f4       	brcc	.+4      	; 0x1b5a <malloc+0x12>
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	e0 91 13 04 	lds	r30, 0x0413	; 0x800413 <__flp>
    1b5e:	f0 91 14 04 	lds	r31, 0x0414	; 0x800414 <__flp+0x1>
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	a0 e0       	ldi	r26, 0x00	; 0
    1b6a:	30 97       	sbiw	r30, 0x00	; 0
    1b6c:	99 f4       	brne	.+38     	; 0x1b94 <malloc+0x4c>
    1b6e:	21 15       	cp	r18, r1
    1b70:	31 05       	cpc	r19, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <malloc+0x2e>
    1b74:	4a c0       	rjmp	.+148    	; 0x1c0a <malloc+0xc2>
    1b76:	28 1b       	sub	r18, r24
    1b78:	39 0b       	sbc	r19, r25
    1b7a:	24 30       	cpi	r18, 0x04	; 4
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	d8 f5       	brcc	.+118    	; 0x1bf6 <malloc+0xae>
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	61 15       	cp	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	89 f1       	breq	.+98     	; 0x1bec <malloc+0xa4>
    1b8a:	fb 01       	movw	r30, r22
    1b8c:	93 83       	std	Z+3, r25	; 0x03
    1b8e:	82 83       	std	Z+2, r24	; 0x02
    1b90:	fe 01       	movw	r30, r28
    1b92:	11 c0       	rjmp	.+34     	; 0x1bb6 <malloc+0x6e>
    1b94:	40 81       	ld	r20, Z
    1b96:	51 81       	ldd	r21, Z+1	; 0x01
    1b98:	02 81       	ldd	r16, Z+2	; 0x02
    1b9a:	13 81       	ldd	r17, Z+3	; 0x03
    1b9c:	48 17       	cp	r20, r24
    1b9e:	59 07       	cpc	r21, r25
    1ba0:	e0 f0       	brcs	.+56     	; 0x1bda <malloc+0x92>
    1ba2:	48 17       	cp	r20, r24
    1ba4:	59 07       	cpc	r21, r25
    1ba6:	99 f4       	brne	.+38     	; 0x1bce <malloc+0x86>
    1ba8:	10 97       	sbiw	r26, 0x00	; 0
    1baa:	61 f0       	breq	.+24     	; 0x1bc4 <malloc+0x7c>
    1bac:	12 96       	adiw	r26, 0x02	; 2
    1bae:	0c 93       	st	X, r16
    1bb0:	12 97       	sbiw	r26, 0x02	; 2
    1bb2:	13 96       	adiw	r26, 0x03	; 3
    1bb4:	1c 93       	st	X, r17
    1bb6:	32 96       	adiw	r30, 0x02	; 2
    1bb8:	cf 01       	movw	r24, r30
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	08 95       	ret
    1bc4:	00 93 13 04 	sts	0x0413, r16	; 0x800413 <__flp>
    1bc8:	10 93 14 04 	sts	0x0414, r17	; 0x800414 <__flp+0x1>
    1bcc:	f4 cf       	rjmp	.-24     	; 0x1bb6 <malloc+0x6e>
    1bce:	21 15       	cp	r18, r1
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	51 f0       	breq	.+20     	; 0x1be8 <malloc+0xa0>
    1bd4:	42 17       	cp	r20, r18
    1bd6:	53 07       	cpc	r21, r19
    1bd8:	38 f0       	brcs	.+14     	; 0x1be8 <malloc+0xa0>
    1bda:	a9 01       	movw	r20, r18
    1bdc:	db 01       	movw	r26, r22
    1bde:	9a 01       	movw	r18, r20
    1be0:	bd 01       	movw	r22, r26
    1be2:	df 01       	movw	r26, r30
    1be4:	f8 01       	movw	r30, r16
    1be6:	c1 cf       	rjmp	.-126    	; 0x1b6a <malloc+0x22>
    1be8:	ef 01       	movw	r28, r30
    1bea:	f9 cf       	rjmp	.-14     	; 0x1bde <malloc+0x96>
    1bec:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <__flp+0x1>
    1bf0:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <__flp>
    1bf4:	cd cf       	rjmp	.-102    	; 0x1b90 <malloc+0x48>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e2 0f       	add	r30, r18
    1bfa:	f3 1f       	adc	r31, r19
    1bfc:	81 93       	st	Z+, r24
    1bfe:	91 93       	st	Z+, r25
    1c00:	22 50       	subi	r18, 0x02	; 2
    1c02:	31 09       	sbc	r19, r1
    1c04:	39 83       	std	Y+1, r19	; 0x01
    1c06:	28 83       	st	Y, r18
    1c08:	d7 cf       	rjmp	.-82     	; 0x1bb8 <malloc+0x70>
    1c0a:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <__brkval>
    1c0e:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <__brkval+0x1>
    1c12:	23 2b       	or	r18, r19
    1c14:	41 f4       	brne	.+16     	; 0x1c26 <malloc+0xde>
    1c16:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    1c1a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    1c1e:	30 93 12 04 	sts	0x0412, r19	; 0x800412 <__brkval+0x1>
    1c22:	20 93 11 04 	sts	0x0411, r18	; 0x800411 <__brkval>
    1c26:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    1c2a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    1c2e:	21 15       	cp	r18, r1
    1c30:	31 05       	cpc	r19, r1
    1c32:	41 f4       	brne	.+16     	; 0x1c44 <malloc+0xfc>
    1c34:	2d b7       	in	r18, 0x3d	; 61
    1c36:	3e b7       	in	r19, 0x3e	; 62
    1c38:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    1c3c:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    1c40:	24 1b       	sub	r18, r20
    1c42:	35 0b       	sbc	r19, r21
    1c44:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <__brkval>
    1c48:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <__brkval+0x1>
    1c4c:	e2 17       	cp	r30, r18
    1c4e:	f3 07       	cpc	r31, r19
    1c50:	a0 f4       	brcc	.+40     	; 0x1c7a <malloc+0x132>
    1c52:	2e 1b       	sub	r18, r30
    1c54:	3f 0b       	sbc	r19, r31
    1c56:	28 17       	cp	r18, r24
    1c58:	39 07       	cpc	r19, r25
    1c5a:	78 f0       	brcs	.+30     	; 0x1c7a <malloc+0x132>
    1c5c:	ac 01       	movw	r20, r24
    1c5e:	4e 5f       	subi	r20, 0xFE	; 254
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	24 17       	cp	r18, r20
    1c64:	35 07       	cpc	r19, r21
    1c66:	48 f0       	brcs	.+18     	; 0x1c7a <malloc+0x132>
    1c68:	4e 0f       	add	r20, r30
    1c6a:	5f 1f       	adc	r21, r31
    1c6c:	50 93 12 04 	sts	0x0412, r21	; 0x800412 <__brkval+0x1>
    1c70:	40 93 11 04 	sts	0x0411, r20	; 0x800411 <__brkval>
    1c74:	81 93       	st	Z+, r24
    1c76:	91 93       	st	Z+, r25
    1c78:	9f cf       	rjmp	.-194    	; 0x1bb8 <malloc+0x70>
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	e0 e0       	ldi	r30, 0x00	; 0
    1c7e:	9c cf       	rjmp	.-200    	; 0x1bb8 <malloc+0x70>

00001c80 <free>:
free():
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	e9 f0       	breq	.+58     	; 0x1cc2 <free+0x42>
    1c88:	fc 01       	movw	r30, r24
    1c8a:	32 97       	sbiw	r30, 0x02	; 2
    1c8c:	13 82       	std	Z+3, r1	; 0x03
    1c8e:	12 82       	std	Z+2, r1	; 0x02
    1c90:	a0 91 13 04 	lds	r26, 0x0413	; 0x800413 <__flp>
    1c94:	b0 91 14 04 	lds	r27, 0x0414	; 0x800414 <__flp+0x1>
    1c98:	ed 01       	movw	r28, r26
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	10 97       	sbiw	r26, 0x00	; 0
    1ca0:	a1 f4       	brne	.+40     	; 0x1cca <free+0x4a>
    1ca2:	20 81       	ld	r18, Z
    1ca4:	31 81       	ldd	r19, Z+1	; 0x01
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <__brkval>
    1cae:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <__brkval+0x1>
    1cb2:	28 17       	cp	r18, r24
    1cb4:	39 07       	cpc	r19, r25
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <free+0x3a>
    1cb8:	61 c0       	rjmp	.+194    	; 0x1d7c <free+0xfc>
    1cba:	f0 93 12 04 	sts	0x0412, r31	; 0x800412 <__brkval+0x1>
    1cbe:	e0 93 11 04 	sts	0x0411, r30	; 0x800411 <__brkval>
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret
    1cc8:	ea 01       	movw	r28, r20
    1cca:	ce 17       	cp	r28, r30
    1ccc:	df 07       	cpc	r29, r31
    1cce:	e8 f5       	brcc	.+122    	; 0x1d4a <free+0xca>
    1cd0:	4a 81       	ldd	r20, Y+2	; 0x02
    1cd2:	5b 81       	ldd	r21, Y+3	; 0x03
    1cd4:	9e 01       	movw	r18, r28
    1cd6:	41 15       	cp	r20, r1
    1cd8:	51 05       	cpc	r21, r1
    1cda:	b1 f7       	brne	.-20     	; 0x1cc8 <free+0x48>
    1cdc:	e9 01       	movw	r28, r18
    1cde:	fb 83       	std	Y+3, r31	; 0x03
    1ce0:	ea 83       	std	Y+2, r30	; 0x02
    1ce2:	49 91       	ld	r20, Y+
    1ce4:	59 91       	ld	r21, Y+
    1ce6:	c4 0f       	add	r28, r20
    1ce8:	d5 1f       	adc	r29, r21
    1cea:	ec 17       	cp	r30, r28
    1cec:	fd 07       	cpc	r31, r29
    1cee:	61 f4       	brne	.+24     	; 0x1d08 <free+0x88>
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	02 96       	adiw	r24, 0x02	; 2
    1cf6:	84 0f       	add	r24, r20
    1cf8:	95 1f       	adc	r25, r21
    1cfa:	e9 01       	movw	r28, r18
    1cfc:	99 83       	std	Y+1, r25	; 0x01
    1cfe:	88 83       	st	Y, r24
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	9b 83       	std	Y+3, r25	; 0x03
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	e0 e0       	ldi	r30, 0x00	; 0
    1d0c:	12 96       	adiw	r26, 0x02	; 2
    1d0e:	8d 91       	ld	r24, X+
    1d10:	9c 91       	ld	r25, X
    1d12:	13 97       	sbiw	r26, 0x03	; 3
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	b9 f5       	brne	.+110    	; 0x1d86 <free+0x106>
    1d18:	2d 91       	ld	r18, X+
    1d1a:	3c 91       	ld	r19, X
    1d1c:	11 97       	sbiw	r26, 0x01	; 1
    1d1e:	cd 01       	movw	r24, r26
    1d20:	02 96       	adiw	r24, 0x02	; 2
    1d22:	82 0f       	add	r24, r18
    1d24:	93 1f       	adc	r25, r19
    1d26:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <__brkval>
    1d2a:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <__brkval+0x1>
    1d2e:	28 17       	cp	r18, r24
    1d30:	39 07       	cpc	r19, r25
    1d32:	39 f6       	brne	.-114    	; 0x1cc2 <free+0x42>
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	51 f5       	brne	.+84     	; 0x1d8c <free+0x10c>
    1d38:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <__flp+0x1>
    1d3c:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <__flp>
    1d40:	b0 93 12 04 	sts	0x0412, r27	; 0x800412 <__brkval+0x1>
    1d44:	a0 93 11 04 	sts	0x0411, r26	; 0x800411 <__brkval>
    1d48:	bc cf       	rjmp	.-136    	; 0x1cc2 <free+0x42>
    1d4a:	d3 83       	std	Z+3, r29	; 0x03
    1d4c:	c2 83       	std	Z+2, r28	; 0x02
    1d4e:	40 81       	ld	r20, Z
    1d50:	51 81       	ldd	r21, Z+1	; 0x01
    1d52:	84 0f       	add	r24, r20
    1d54:	95 1f       	adc	r25, r21
    1d56:	c8 17       	cp	r28, r24
    1d58:	d9 07       	cpc	r29, r25
    1d5a:	61 f4       	brne	.+24     	; 0x1d74 <free+0xf4>
    1d5c:	4e 5f       	subi	r20, 0xFE	; 254
    1d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d60:	88 81       	ld	r24, Y
    1d62:	99 81       	ldd	r25, Y+1	; 0x01
    1d64:	48 0f       	add	r20, r24
    1d66:	59 1f       	adc	r21, r25
    1d68:	51 83       	std	Z+1, r21	; 0x01
    1d6a:	40 83       	st	Z, r20
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	93 83       	std	Z+3, r25	; 0x03
    1d72:	82 83       	std	Z+2, r24	; 0x02
    1d74:	21 15       	cp	r18, r1
    1d76:	31 05       	cpc	r19, r1
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <free+0xfc>
    1d7a:	b0 cf       	rjmp	.-160    	; 0x1cdc <free+0x5c>
    1d7c:	f0 93 14 04 	sts	0x0414, r31	; 0x800414 <__flp+0x1>
    1d80:	e0 93 13 04 	sts	0x0413, r30	; 0x800413 <__flp>
    1d84:	9e cf       	rjmp	.-196    	; 0x1cc2 <free+0x42>
    1d86:	fd 01       	movw	r30, r26
    1d88:	dc 01       	movw	r26, r24
    1d8a:	c0 cf       	rjmp	.-128    	; 0x1d0c <free+0x8c>
    1d8c:	13 82       	std	Z+3, r1	; 0x03
    1d8e:	12 82       	std	Z+2, r1	; 0x02
    1d90:	d7 cf       	rjmp	.-82     	; 0x1d40 <free+0xc0>

00001d92 <realloc>:
realloc():
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	a0 e0       	ldi	r26, 0x00	; 0
    1d96:	ef ec       	ldi	r30, 0xCF	; 207
    1d98:	fe e0       	ldi	r31, 0x0E	; 14
    1d9a:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__prologue_saves__+0x4>
    1d9e:	8c 01       	movw	r16, r24
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	51 f4       	brne	.+20     	; 0x1db8 <realloc+0x26>
    1da4:	cb 01       	movw	r24, r22
    1da6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <malloc>
    1daa:	8c 01       	movw	r16, r24
    1dac:	c8 01       	movw	r24, r16
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	e0 e1       	ldi	r30, 0x10	; 16
    1db4:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__epilogue_restores__+0x4>
    1db8:	fc 01       	movw	r30, r24
    1dba:	e6 0f       	add	r30, r22
    1dbc:	f7 1f       	adc	r31, r23
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	22 50       	subi	r18, 0x02	; 2
    1dc2:	31 09       	sbc	r19, r1
    1dc4:	e2 17       	cp	r30, r18
    1dc6:	f3 07       	cpc	r31, r19
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <realloc+0x3a>
    1dca:	9d c0       	rjmp	.+314    	; 0x1f06 <realloc+0x174>
    1dcc:	d9 01       	movw	r26, r18
    1dce:	cd 91       	ld	r28, X+
    1dd0:	dc 91       	ld	r29, X
    1dd2:	11 97       	sbiw	r26, 0x01	; 1
    1dd4:	c6 17       	cp	r28, r22
    1dd6:	d7 07       	cpc	r29, r23
    1dd8:	98 f0       	brcs	.+38     	; 0x1e00 <realloc+0x6e>
    1dda:	c5 30       	cpi	r28, 0x05	; 5
    1ddc:	d1 05       	cpc	r29, r1
    1dde:	30 f3       	brcs	.-52     	; 0x1dac <realloc+0x1a>
    1de0:	ce 01       	movw	r24, r28
    1de2:	04 97       	sbiw	r24, 0x04	; 4
    1de4:	86 17       	cp	r24, r22
    1de6:	97 07       	cpc	r25, r23
    1de8:	08 f3       	brcs	.-62     	; 0x1dac <realloc+0x1a>
    1dea:	c6 1b       	sub	r28, r22
    1dec:	d7 0b       	sbc	r29, r23
    1dee:	22 97       	sbiw	r28, 0x02	; 2
    1df0:	c1 93       	st	Z+, r28
    1df2:	d1 93       	st	Z+, r29
    1df4:	6d 93       	st	X+, r22
    1df6:	7c 93       	st	X, r23
    1df8:	cf 01       	movw	r24, r30
    1dfa:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <free>
    1dfe:	d6 cf       	rjmp	.-84     	; 0x1dac <realloc+0x1a>
    1e00:	5b 01       	movw	r10, r22
    1e02:	ac 1a       	sub	r10, r28
    1e04:	bd 0a       	sbc	r11, r29
    1e06:	4c 01       	movw	r8, r24
    1e08:	8c 0e       	add	r8, r28
    1e0a:	9d 1e       	adc	r9, r29
    1e0c:	a0 91 13 04 	lds	r26, 0x0413	; 0x800413 <__flp>
    1e10:	b0 91 14 04 	lds	r27, 0x0414	; 0x800414 <__flp+0x1>
    1e14:	51 2c       	mov	r5, r1
    1e16:	41 2c       	mov	r4, r1
    1e18:	f1 2c       	mov	r15, r1
    1e1a:	e1 2c       	mov	r14, r1
    1e1c:	10 97       	sbiw	r26, 0x00	; 0
    1e1e:	31 f5       	brne	.+76     	; 0x1e6c <realloc+0xda>
    1e20:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <__brkval>
    1e24:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <__brkval+0x1>
    1e28:	88 15       	cp	r24, r8
    1e2a:	99 05       	cpc	r25, r9
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <realloc+0x9e>
    1e2e:	5c c0       	rjmp	.+184    	; 0x1ee8 <realloc+0x156>
    1e30:	46 16       	cp	r4, r22
    1e32:	57 06       	cpc	r5, r23
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <realloc+0xa6>
    1e36:	58 c0       	rjmp	.+176    	; 0x1ee8 <realloc+0x156>
    1e38:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__malloc_heap_end>
    1e3c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	41 f4       	brne	.+16     	; 0x1e54 <realloc+0xc2>
    1e44:	8d b7       	in	r24, 0x3d	; 61
    1e46:	9e b7       	in	r25, 0x3e	; 62
    1e48:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    1e4c:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    1e50:	84 1b       	sub	r24, r20
    1e52:	95 0b       	sbc	r25, r21
    1e54:	e8 17       	cp	r30, r24
    1e56:	f9 07       	cpc	r31, r25
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <realloc+0xca>
    1e5a:	55 c0       	rjmp	.+170    	; 0x1f06 <realloc+0x174>
    1e5c:	f0 93 12 04 	sts	0x0412, r31	; 0x800412 <__brkval+0x1>
    1e60:	e0 93 11 04 	sts	0x0411, r30	; 0x800411 <__brkval>
    1e64:	f9 01       	movw	r30, r18
    1e66:	71 83       	std	Z+1, r23	; 0x01
    1e68:	60 83       	st	Z, r22
    1e6a:	a0 cf       	rjmp	.-192    	; 0x1dac <realloc+0x1a>
    1e6c:	8d 91       	ld	r24, X+
    1e6e:	9c 91       	ld	r25, X
    1e70:	11 97       	sbiw	r26, 0x01	; 1
    1e72:	12 96       	adiw	r26, 0x02	; 2
    1e74:	6c 90       	ld	r6, X
    1e76:	12 97       	sbiw	r26, 0x02	; 2
    1e78:	13 96       	adiw	r26, 0x03	; 3
    1e7a:	7c 90       	ld	r7, X
    1e7c:	13 97       	sbiw	r26, 0x03	; 3
    1e7e:	a8 15       	cp	r26, r8
    1e80:	b9 05       	cpc	r27, r9
    1e82:	59 f5       	brne	.+86     	; 0x1eda <realloc+0x148>
    1e84:	6c 01       	movw	r12, r24
    1e86:	42 e0       	ldi	r20, 0x02	; 2
    1e88:	c4 0e       	add	r12, r20
    1e8a:	d1 1c       	adc	r13, r1
    1e8c:	ca 14       	cp	r12, r10
    1e8e:	db 04       	cpc	r13, r11
    1e90:	20 f1       	brcs	.+72     	; 0x1eda <realloc+0x148>
    1e92:	ac 01       	movw	r20, r24
    1e94:	4a 19       	sub	r20, r10
    1e96:	5b 09       	sbc	r21, r11
    1e98:	da 01       	movw	r26, r20
    1e9a:	12 96       	adiw	r26, 0x02	; 2
    1e9c:	15 97       	sbiw	r26, 0x05	; 5
    1e9e:	80 f0       	brcs	.+32     	; 0x1ec0 <realloc+0x12e>
    1ea0:	62 82       	std	Z+2, r6	; 0x02
    1ea2:	73 82       	std	Z+3, r7	; 0x03
    1ea4:	51 83       	std	Z+1, r21	; 0x01
    1ea6:	40 83       	st	Z, r20
    1ea8:	d9 01       	movw	r26, r18
    1eaa:	6d 93       	st	X+, r22
    1eac:	7c 93       	st	X, r23
    1eae:	e1 14       	cp	r14, r1
    1eb0:	f1 04       	cpc	r15, r1
    1eb2:	71 f0       	breq	.+28     	; 0x1ed0 <realloc+0x13e>
    1eb4:	d7 01       	movw	r26, r14
    1eb6:	13 96       	adiw	r26, 0x03	; 3
    1eb8:	fc 93       	st	X, r31
    1eba:	ee 93       	st	-X, r30
    1ebc:	12 97       	sbiw	r26, 0x02	; 2
    1ebe:	76 cf       	rjmp	.-276    	; 0x1dac <realloc+0x1a>
    1ec0:	22 96       	adiw	r28, 0x02	; 2
    1ec2:	8c 0f       	add	r24, r28
    1ec4:	9d 1f       	adc	r25, r29
    1ec6:	f9 01       	movw	r30, r18
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
    1ecc:	f3 01       	movw	r30, r6
    1ece:	ef cf       	rjmp	.-34     	; 0x1eae <realloc+0x11c>
    1ed0:	f0 93 14 04 	sts	0x0414, r31	; 0x800414 <__flp+0x1>
    1ed4:	e0 93 13 04 	sts	0x0413, r30	; 0x800413 <__flp>
    1ed8:	69 cf       	rjmp	.-302    	; 0x1dac <realloc+0x1a>
    1eda:	48 16       	cp	r4, r24
    1edc:	59 06       	cpc	r5, r25
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <realloc+0x150>
    1ee0:	2c 01       	movw	r4, r24
    1ee2:	7d 01       	movw	r14, r26
    1ee4:	d3 01       	movw	r26, r6
    1ee6:	9a cf       	rjmp	.-204    	; 0x1e1c <realloc+0x8a>
    1ee8:	cb 01       	movw	r24, r22
    1eea:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <malloc>
    1eee:	7c 01       	movw	r14, r24
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	49 f0       	breq	.+18     	; 0x1f06 <realloc+0x174>
    1ef4:	ae 01       	movw	r20, r28
    1ef6:	b8 01       	movw	r22, r16
    1ef8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <memcpy>
    1efc:	c8 01       	movw	r24, r16
    1efe:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <free>
    1f02:	87 01       	movw	r16, r14
    1f04:	53 cf       	rjmp	.-346    	; 0x1dac <realloc+0x1a>
    1f06:	10 e0       	ldi	r17, 0x00	; 0
    1f08:	00 e0       	ldi	r16, 0x00	; 0
    1f0a:	50 cf       	rjmp	.-352    	; 0x1dac <realloc+0x1a>

00001f0c <memcpy>:
memcpy():
    1f0c:	fb 01       	movw	r30, r22
    1f0e:	dc 01       	movw	r26, r24
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <memcpy+0xa>
    1f12:	01 90       	ld	r0, Z+
    1f14:	0d 92       	st	X+, r0
    1f16:	41 50       	subi	r20, 0x01	; 1
    1f18:	50 40       	sbci	r21, 0x00	; 0
    1f1a:	d8 f7       	brcc	.-10     	; 0x1f12 <memcpy+0x6>
    1f1c:	08 95       	ret

00001f1e <strchr>:
strchr():
    1f1e:	fc 01       	movw	r30, r24
    1f20:	81 91       	ld	r24, Z+
    1f22:	86 17       	cp	r24, r22
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <strchr+0x10>
    1f26:	88 23       	and	r24, r24
    1f28:	d9 f7       	brne	.-10     	; 0x1f20 <strchr+0x2>
    1f2a:	99 27       	eor	r25, r25
    1f2c:	08 95       	ret
    1f2e:	31 97       	sbiw	r30, 0x01	; 1
    1f30:	cf 01       	movw	r24, r30
    1f32:	08 95       	ret

00001f34 <strcmp>:
strcmp():
    1f34:	fb 01       	movw	r30, r22
    1f36:	dc 01       	movw	r26, r24
    1f38:	8d 91       	ld	r24, X+
    1f3a:	01 90       	ld	r0, Z+
    1f3c:	80 19       	sub	r24, r0
    1f3e:	01 10       	cpse	r0, r1
    1f40:	d9 f3       	breq	.-10     	; 0x1f38 <strcmp+0x4>
    1f42:	99 0b       	sbc	r25, r25
    1f44:	08 95       	ret

00001f46 <strcpy>:
strcpy():
    1f46:	fb 01       	movw	r30, r22
    1f48:	dc 01       	movw	r26, r24
    1f4a:	01 90       	ld	r0, Z+
    1f4c:	0d 92       	st	X+, r0
    1f4e:	00 20       	and	r0, r0
    1f50:	e1 f7       	brne	.-8      	; 0x1f4a <strcpy+0x4>
    1f52:	08 95       	ret

00001f54 <strncmp>:
strncmp():
    1f54:	fb 01       	movw	r30, r22
    1f56:	dc 01       	movw	r26, r24
    1f58:	41 50       	subi	r20, 0x01	; 1
    1f5a:	50 40       	sbci	r21, 0x00	; 0
    1f5c:	30 f0       	brcs	.+12     	; 0x1f6a <strncmp+0x16>
    1f5e:	8d 91       	ld	r24, X+
    1f60:	01 90       	ld	r0, Z+
    1f62:	80 19       	sub	r24, r0
    1f64:	19 f4       	brne	.+6      	; 0x1f6c <strncmp+0x18>
    1f66:	00 20       	and	r0, r0
    1f68:	b9 f7       	brne	.-18     	; 0x1f58 <strncmp+0x4>
    1f6a:	88 1b       	sub	r24, r24
    1f6c:	99 0b       	sbc	r25, r25
    1f6e:	08 95       	ret

00001f70 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1f70:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1f72:	c7 e6       	ldi	r28, 0x67	; 103
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1f74:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1f78:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1f7a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1f7e:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1f80:	c8 36       	cpi	r28, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1f82:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1f84:	c9 f7       	brne	.-14     	; 0x1f78 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1f86:	f8 94       	cli

00001f88 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1f88:	ff cf       	rjmp	.-2      	; 0x1f88 <__stop_program>
